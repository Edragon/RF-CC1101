C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE 1100
OBJECT MODULE PLACED IN 1100.OBJ
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE 1100.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #define         INT8U           unsigned char
   4          #define         INT16U          unsigned int
   5          /*****************************************************************************************/
   6          #define         WRITE_BURST             0x40                                            //连续写入
   7          #define         READ_SINGLE             0x80                                            //读
   8          #define         READ_BURST              0xC0                                            //连续读
   9          #define         BYTES_IN_RXFIFO     0x7F                                                //接收缓冲区的有效字节数
  10          #define         CRC_OK              0x80                                                //CRC校验通过位标志
  11          //*****************************************************************************************
  12          sbit    GDO0    =P1^0;
  13          sbit    GDO2    =P1^1;
  14          sbit    MISO    =P1^6;
  15          sbit    MOSI    =P1^7;
  16          sbit    SCK             =P1^2;
  17          sbit    CSN             =P1^5;
  18          //----------------------------------------按键端口-------------------------------------------------------
  19          sbit    KEY=P3^4;
  20          //----------------------------------------LED显示端口---------------------------------------------------
  21          sbit    LED=P3^5;
  22          //***************更多功率参数设置可详细参考DATACC1100英文文档中第48-49页的参数表******************
  23          //INT8U PaTabel[8] = {0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04};  //-30dBm   功率最小
  24          INT8U PaTabel[8] = {0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60};  //0dBm
  25          //INT8U PaTabel[8] = {0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0};   //10dBm     功率最大
  26          //*****************************************************************************************
  27          char    flag,m;
  28          #define TxRxBuf_Len 32
  29          xdata char      TxRxBuf1[32];
  30          xdata char      TxRxBuf2[32];
  31          //**********************************************函数申明*******************************************
  32          void SpiInit(void);
  33          void CpuInit(void);
  34          void RESET_CC1100(void);
  35          void POWER_UP_RESET_CC1100(void);
  36          void halSpiWriteReg(INT8U addr, INT8U value);
  37          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  38          void halSpiStrobe(INT8U strobe);
  39          INT8U halSpiReadReg(INT8U addr);
  40          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  41          INT8U halSpiReadStatus(INT8U addr);
  42          void halRfWriteRfSettings(void);
  43          void halRfSendPacket(INT8U *txBuffer, INT8U size); 
  44          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length);  
  45          void UART_init();
  46          void R_S_Byte(char R_Byte);
  47          //*****************************************************************************************
  48          // CC1100 STROBE, CONTROL AND STATUS REGSITER
  49          #define CCxxx0_IOCFG2       0x00        // GDO2 output pin configuration
  50          #define CCxxx0_IOCFG1       0x01        // GDO1 output pin configuration
  51          #define CCxxx0_IOCFG0       0x02        // GDO0 output pin configuration
  52          #define CCxxx0_FIFOTHR      0x03        // RX FIFO and TX FIFO thresholds
  53          #define CCxxx0_SYNC1        0x04        // Sync word, high INT8U
  54          #define CCxxx0_SYNC0        0x05        // Sync word, low INT8U
  55          #define CCxxx0_PKTLEN       0x06        // Packet length
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 2   

  56          #define CCxxx0_PKTCTRL1     0x07        // Packet automation control
  57          #define CCxxx0_PKTCTRL0     0x08        // Packet automation control
  58          #define CCxxx0_ADDR         0x09        // Device address
  59          #define CCxxx0_CHANNR       0x0A        // Channel number
  60          #define CCxxx0_FSCTRL1      0x0B        // Frequency synthesizer control
  61          #define CCxxx0_FSCTRL0      0x0C        // Frequency synthesizer control
  62          #define CCxxx0_FREQ2        0x0D        // Frequency control word, high INT8U
  63          #define CCxxx0_FREQ1        0x0E        // Frequency control word, middle INT8U
  64          #define CCxxx0_FREQ0        0x0F        // Frequency control word, low INT8U
  65          #define CCxxx0_MDMCFG4      0x10        // Modem configuration
  66          #define CCxxx0_MDMCFG3      0x11        // Modem configuration
  67          #define CCxxx0_MDMCFG2      0x12        // Modem configuration
  68          #define CCxxx0_MDMCFG1      0x13        // Modem configuration
  69          #define CCxxx0_MDMCFG0      0x14        // Modem configuration
  70          #define CCxxx0_DEVIATN      0x15        // Modem deviation setting
  71          #define CCxxx0_MCSM2        0x16        // Main Radio Control State Machine configuration
  72          #define CCxxx0_MCSM1        0x17        // Main Radio Control State Machine configuration
  73          #define CCxxx0_MCSM0        0x18        // Main Radio Control State Machine configuration
  74          #define CCxxx0_FOCCFG       0x19        // Frequency Offset Compensation configuration
  75          #define CCxxx0_BSCFG        0x1A        // Bit Synchronization configuration
  76          #define CCxxx0_AGCCTRL2     0x1B        // AGC control
  77          #define CCxxx0_AGCCTRL1     0x1C        // AGC control
  78          #define CCxxx0_AGCCTRL0     0x1D        // AGC control
  79          #define CCxxx0_WOREVT1      0x1E        // High INT8U Event 0 timeout
  80          #define CCxxx0_WOREVT0      0x1F        // Low INT8U Event 0 timeout
  81          #define CCxxx0_WORCTRL      0x20        // Wake On Radio control
  82          #define CCxxx0_FREND1       0x21        // Front end RX configuration
  83          #define CCxxx0_FREND0       0x22        // Front end TX configuration
  84          #define CCxxx0_FSCAL3       0x23        // Frequency synthesizer calibration
  85          #define CCxxx0_FSCAL2       0x24        // Frequency synthesizer calibration
  86          #define CCxxx0_FSCAL1       0x25        // Frequency synthesizer calibration
  87          #define CCxxx0_FSCAL0       0x26        // Frequency synthesizer calibration
  88          #define CCxxx0_RCCTRL1      0x27        // RC oscillator configuration
  89          #define CCxxx0_RCCTRL0      0x28        // RC oscillator configuration
  90          #define CCxxx0_FSTEST       0x29        // Frequency synthesizer calibration control
  91          #define CCxxx0_PTEST        0x2A        // Production test
  92          #define CCxxx0_AGCTEST      0x2B        // AGC test
  93          #define CCxxx0_TEST2        0x2C        // Various test settings
  94          #define CCxxx0_TEST1        0x2D        // Various test settings
  95          #define CCxxx0_TEST0        0x2E        // Various test settings
  96          // Strobe commands
  97          #define CCxxx0_SRES         0x30        // Reset chip.
  98          #define CCxxx0_SFSTXON      0x31        // Enable and calibrate frequency synthesizer (if MCSM0.FS_AUTOCAL
             -=1).
  99                                                  // If in RX/TX: Go to a wait state where only the synthesizer is
 100                                                  // running (for quick RX / TX turnaround).
 101          #define CCxxx0_SXOFF        0x32        // Turn off crystal oscillator.
 102          #define CCxxx0_SCAL         0x33        // Calibrate frequency synthesizer and turn it off
 103                                                  // (enables quick start).
 104          #define CCxxx0_SRX          0x34        // Enable RX. Perform calibration first if coming from IDLE and
 105                                                  // MCSM0.FS_AUTOCAL=1.
 106          #define CCxxx0_STX          0x35        // In IDLE state: Enable TX. Perform calibration first if
 107                                                  // MCSM0.FS_AUTOCAL=1. If in RX state and CCA is enabled:
 108                                                  // Only go to TX if channel is clear.
 109          #define CCxxx0_SIDLE        0x36        // Exit RX / TX, turn off frequency synthesizer and exit
 110                                                  // Wake-On-Radio mode if applicable.
 111          #define CCxxx0_SAFC         0x37        // Perform AFC adjustment of the frequency synthesizer
 112          #define CCxxx0_SWOR         0x38        // Start automatic RX polling sequence (Wake-on-Radio)
 113          #define CCxxx0_SPWD         0x39        // Enter power down mode when CSn goes high.
 114          #define CCxxx0_SFRX         0x3A        // Flush the RX FIFO buffer.
 115          #define CCxxx0_SFTX         0x3B        // Flush the TX FIFO buffer.
 116          #define CCxxx0_SWORRST      0x3C        // Reset real time clock.
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 3   

 117          #define CCxxx0_SNOP         0x3D        // No operation. May be used to pad strobe commands to two
 118                                                  // INT8Us for simpler software.
 119          #define CCxxx0_PARTNUM      0x30
 120          #define CCxxx0_VERSION      0x31
 121          #define CCxxx0_FREQEST      0x32
 122          #define CCxxx0_LQI          0x33
 123          #define CCxxx0_RSSI         0x34
 124          #define CCxxx0_MARCSTATE    0x35
 125          #define CCxxx0_WORTIME1     0x36
 126          #define CCxxx0_WORTIME0     0x37
 127          #define CCxxx0_PKTSTATUS    0x38
 128          #define CCxxx0_VCO_VC_DAC   0x39
 129          #define CCxxx0_TXBYTES      0x3A
 130          #define CCxxx0_RXBYTES      0x3B
 131          #define CCxxx0_PATABLE      0x3E
 132          #define CCxxx0_TXFIFO       0x3F
 133          #define CCxxx0_RXFIFO       0x3F
 134          // RF_SETTINGS is a data structure which contains all relevant CCxxx0 registers
 135          typedef struct S_RF_SETTINGS
 136          {
 137                  INT8U FSCTRL2;          //自已加的
 138              INT8U FSCTRL1;   // Frequency synthesizer control.
 139              INT8U FSCTRL0;   // Frequency synthesizer control.
 140              INT8U FREQ2;     // Frequency control word, high INT8U.
 141              INT8U FREQ1;     // Frequency control word, middle INT8U.
 142              INT8U FREQ0;     // Frequency control word, low INT8U.
 143              INT8U MDMCFG4;   // Modem configuration.
 144              INT8U MDMCFG3;   // Modem configuration.
 145              INT8U MDMCFG2;   // Modem configuration.
 146              INT8U MDMCFG1;   // Modem configuration.
 147              INT8U MDMCFG0;   // Modem configuration.
 148              INT8U CHANNR;    // Channel number.
 149              INT8U DEVIATN;   // Modem deviation setting (when FSK modulation is enabled).
 150              INT8U FREND1;    // Front end RX configuration.
 151              INT8U FREND0;    // Front end RX configuration.
 152              INT8U MCSM0;     // Main Radio Control State Machine configuration.
 153              INT8U FOCCFG;    // Frequency Offset Compensation Configuration.
 154              INT8U BSCFG;     // Bit synchronization Configuration.
 155              INT8U AGCCTRL2;  // AGC control.
 156                  INT8U AGCCTRL1;  // AGC control.
 157              INT8U AGCCTRL0;  // AGC control.
 158              INT8U FSCAL3;    // Frequency synthesizer calibration.
 159              INT8U FSCAL2;    // Frequency synthesizer calibration.
 160                  INT8U FSCAL1;    // Frequency synthesizer calibration.
 161              INT8U FSCAL0;    // Frequency synthesizer calibration.
 162              INT8U FSTEST;    // Frequency synthesizer calibration control
 163              INT8U TEST2;     // Various test settings.
 164              INT8U TEST1;     // Various test settings.
 165              INT8U TEST0;     // Various test settings.
 166              INT8U IOCFG2;    // GDO2 output pin configuration
 167              INT8U IOCFG0;    // GDO0 output pin configuration
 168              INT8U PKTCTRL1;  // Packet automation control.
 169              INT8U PKTCTRL0;  // Packet automation control.
 170              INT8U ADDR;      // Device address.
 171              INT8U PKTLEN;    // Packet length.
 172          } RF_SETTINGS;
 173          //*****************************************************************************************
 174          const RF_SETTINGS rfSettings = 
 175          {
 176                  0x00,
 177              0x08,   // FSCTRL1   Frequency synthesizer control.
 178              0x00,   // FSCTRL0   Frequency synthesizer control.
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 4   

 179              0x10,   // FREQ2     Frequency control word, high byte.
 180              0xA7,   // FREQ1     Frequency control word, middle byte.
 181              0x62,   // FREQ0     Frequency control word, low byte.
 182              0x5B,   // MDMCFG4   Modem configuration.
 183              0xF8,   // MDMCFG3   Modem configuration.
 184              0x03,   // MDMCFG2   Modem configuration.
 185              0x22,   // MDMCFG1   Modem configuration.
 186              0xF8,   // MDMCFG0   Modem configuration.
 187              0x00,   // CHANNR    Channel number.
 188              0x47,   // DEVIATN   Modem deviation setting (when FSK modulation is enabled).
 189              0xB6,   // FREND1    Front end RX configuration.
 190              0x10,   // FREND0    Front end RX configuration.
 191              0x18,   // MCSM0     Main Radio Control State Machine configuration.
 192              0x1D,   // FOCCFG    Frequency Offset Compensation Configuration.
 193              0x1C,   // BSCFG     Bit synchronization Configuration.
 194              0xC7,   // AGCCTRL2  AGC control.
 195              0x00,   // AGCCTRL1  AGC control.
 196              0xB2,   // AGCCTRL0  AGC control.
 197              0xEA,   // FSCAL3    Frequency synthesizer calibration.
 198              0x2A,   // FSCAL2    Frequency synthesizer calibration.
 199              0x00,   // FSCAL1    Frequency synthesizer calibration.
 200              0x11,   // FSCAL0    Frequency synthesizer calibration.
 201              0x59,   // FSTEST    Frequency synthesizer calibration.
 202              0x81,   // TEST2     Various test settings.
 203              0x35,   // TEST1     Various test settings.
 204              0x09,   // TEST0     Various test settings.
 205              0x0B,   // IOCFG2    GDO2 output pin configuration.
 206              0x06,   // IOCFG0D   GDO0 output pin configuration. Refer to SmartRF?Studio User Manual for detailed p
             -seudo register explanation.
 207              0x04,   // PKTCTRL1  Packet automation control.
 208              0x05,   // PKTCTRL0  Packet automation control.
 209              0x00,   // ADDR      Device address.
 210              0xff    // PKTLEN    Packet length.最大
 211          };
 212          //*****************************************************************************************
 213          //函数名：delay(unsigned int s)
 214          //输入：时间
 215          //输出：无
 216          //功能描述：普通廷时,内部用
 217          //*****************************************************************************************             
 218          static void delay(unsigned int s)
 219          {
 220   1              unsigned int i;
 221   1              for(i=0; i<s; i++);
 222   1              for(i=0; i<s; i++);
 223   1      }
 224          //*****************************************************************************************
 225          void halWait(INT16U timeout) 
 226          {
 227   1          do
 228   1               {
 229   2              _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); 
 230   2                      _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();
 231   2           } while (--timeout);
 232   1      }
 233          //*****************************************************************************************
 234          void SpiInit(void)
 235          {
 236   1              CSN=0;
 237   1              SCK=0;
 238   1              CSN=1;
 239   1      }
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 5   

 240          /*****************************************************************************************
 241          //函数名：CpuInit()
 242          //输入：无
 243          //输出：无
 244          //功能描述：SPI初始化程序
 245          /*****************************************************************************************/
 246          void CpuInit(void)
 247          {
 248   1              SpiInit();
 249   1              delay(5000);
 250   1      }
 251          //*****************************************************************************************
 252          //函数名：SpisendByte(INT8U dat)
 253          //输入：发送的数据
 254          //输出：无
 255          //功能描述：SPI发送一个字节
 256          //*****************************************************************************************
 257          INT8U SpiTxRxByte(INT8U dat)
 258          {
 259   1              INT8U i,temp;
 260   1              temp = 0;
 261   1              
 262   1              SCK = 0;
 263   1              for(i=0; i<8; i++)
 264   1              {
 265   2                      if(dat & 0x80)
 266   2                      {
 267   3                              MOSI = 1;
 268   3                      }
 269   2                      else MOSI = 0;
 270   2                      dat <<= 1;
 271   2      
 272   2                      SCK = 1; 
 273   2                      _nop_();
 274   2                      _nop_();
 275   2      
 276   2                      temp <<= 1;
 277   2                      if(MISO)temp++; 
 278   2                      SCK = 0;
 279   2                      _nop_();
 280   2                      _nop_();        
 281   2              }
 282   1              return temp;
 283   1      }
 284          //*****************************************************************************************
 285          //函数名：void RESET_CC1100(void)
 286          //输入：无
 287          //输出：无
 288          //功能描述：复位CC1100
 289          //*****************************************************************************************
 290          void RESET_CC1100(void) 
 291          {
 292   1              CSN = 0; 
 293   1              while (MISO);
 294   1          SpiTxRxByte(CCxxx0_SRES);           //写入复位命令
 295   1              while (MISO); 
 296   1          CSN = 1; 
 297   1      }
 298          //*****************************************************************************************
 299          //函数名：void POWER_UP_RESET_CC1100(void) 
 300          //输入：无
 301          //输出：无
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 6   

 302          //功能描述：上电复位CC1100
 303          //*****************************************************************************************
 304          void POWER_UP_RESET_CC1100(void) 
 305          {
 306   1              CSN = 1; 
 307   1              halWait(1); 
 308   1              CSN = 0; 
 309   1              halWait(1); 
 310   1              CSN = 1; 
 311   1              halWait(41); 
 312   1              RESET_CC1100();                 //复位CC1100
 313   1      }
 314          //*****************************************************************************************
 315          //函数名：void halSpiWriteReg(INT8U addr, INT8U value)
 316          //输入：地址和配置字
 317          //输出：无
 318          //功能描述：SPI写寄存器
 319          //*****************************************************************************************
 320          void halSpiWriteReg(INT8U addr, INT8U value) 
 321          {
 322   1          CSN = 0;
 323   1          while (MISO);
 324   1          SpiTxRxByte(addr);          //写地址
 325   1          SpiTxRxByte(value);         //写入配置
 326   1          CSN = 1;
 327   1      }
 328          //*****************************************************************************************
 329          //函数名：void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 330          //输入：地址，写入缓冲区，写入个数
 331          //输出：无
 332          //功能描述：SPI连续写配置寄存器
 333          //*****************************************************************************************
 334          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 335          {
 336   1          INT8U i, temp;
 337   1              temp = addr | WRITE_BURST;
 338   1          CSN = 0;
 339   1          while (MISO);
 340   1          SpiTxRxByte(temp);
 341   1          for (i = 0; i < count; i++)
 342   1              {
 343   2              SpiTxRxByte(buffer[i]);
 344   2          }
 345   1          CSN = 1;
 346   1      }
 347          //*****************************************************************************************
 348          //函数名：void halSpiStrobe(INT8U strobe)
 349          //输入：命令
 350          //输出：无
 351          //功能描述：SPI写命令
 352          //*****************************************************************************************
 353          void halSpiStrobe(INT8U strobe) 
 354          {
 355   1          CSN = 0;
 356   1          while (MISO);
 357   1          SpiTxRxByte(strobe);                //写入命令
 358   1          CSN = 1;
 359   1      }
 360          //*****************************************************************************************
 361          //函数名：INT8U halSpiReadReg(INT8U addr)
 362          //输入：地址
 363          //输出：该寄存器的配置字
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 7   

 364          //功能描述：SPI读寄存器
 365          //*****************************************************************************************
 366          INT8U halSpiReadReg(INT8U addr) 
 367          {
 368   1              INT8U temp, value;
 369   1          temp = addr|READ_SINGLE;//读寄存器命令
 370   1              CSN = 0;
 371   1              while (MISO);
 372   1              SpiTxRxByte(temp);
 373   1              value = SpiTxRxByte(0);
 374   1              CSN = 1;
 375   1              return value;
 376   1      }
 377          //*****************************************************************************************
 378          //函数名：void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 379          //输入：地址，读出数据后暂存的缓冲区，读出配置个数
 380          //输出：无
 381          //功能描述：SPI连续写配置寄存器
 382          //*****************************************************************************************
 383          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 384          {
 385   1          INT8U i,temp;
 386   1              temp = addr | READ_BURST;               //写入要读的配置寄存器地址和读命令
 387   1          CSN = 0;
 388   1          while (MISO);
 389   1              SpiTxRxByte(temp);   
 390   1          for (i = 0; i < count; i++) 
 391   1              {
 392   2              buffer[i] = SpiTxRxByte(0);
 393   2          }
 394   1          CSN = 1;
 395   1      }
 396          //*****************************************************************************************
 397          //函数名：INT8U halSpiReadReg(INT8U addr)
 398          //输入：地址
 399          //输出：该状态寄存器当前值
 400          //功能描述：SPI读状态寄存器
 401          //*****************************************************************************************
 402          INT8U halSpiReadStatus(INT8U addr) 
 403          {
 404   1          INT8U value,temp;
 405   1              temp = addr | READ_BURST;               //写入要读的状态寄存器的地址同时写入读命令
 406   1          CSN = 0;
 407   1          while (MISO);
 408   1          SpiTxRxByte(temp);
 409   1              value = SpiTxRxByte(0);
 410   1              CSN = 1;
 411   1              return value;
 412   1      }
 413          //*****************************************************************************************
 414          //函数名：void halRfWriteRfSettings(RF_SETTINGS *pRfSettings)
 415          //输入：无
 416          //输出：无
 417          //功能描述：配置CC1100的寄存器
 418          //*****************************************************************************************
 419          void halRfWriteRfSettings(void) 
 420          {
 421   1              halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL2);//自已加的
 422   1          // Write register settings
 423   1          halSpiWriteReg(CCxxx0_FSCTRL1,  rfSettings.FSCTRL1);
 424   1          halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL0);
 425   1          halSpiWriteReg(CCxxx0_FREQ2,    rfSettings.FREQ2);
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 8   

 426   1          halSpiWriteReg(CCxxx0_FREQ1,    rfSettings.FREQ1);
 427   1          halSpiWriteReg(CCxxx0_FREQ0,    rfSettings.FREQ0);
 428   1          halSpiWriteReg(CCxxx0_MDMCFG4,  rfSettings.MDMCFG4);
 429   1          halSpiWriteReg(CCxxx0_MDMCFG3,  rfSettings.MDMCFG3);
 430   1          halSpiWriteReg(CCxxx0_MDMCFG2,  rfSettings.MDMCFG2);
 431   1          halSpiWriteReg(CCxxx0_MDMCFG1,  rfSettings.MDMCFG1);
 432   1          halSpiWriteReg(CCxxx0_MDMCFG0,  rfSettings.MDMCFG0);
 433   1          halSpiWriteReg(CCxxx0_CHANNR,   rfSettings.CHANNR);
 434   1          halSpiWriteReg(CCxxx0_DEVIATN,  rfSettings.DEVIATN);
 435   1          halSpiWriteReg(CCxxx0_FREND1,   rfSettings.FREND1);
 436   1          halSpiWriteReg(CCxxx0_FREND0,   rfSettings.FREND0);
 437   1          halSpiWriteReg(CCxxx0_MCSM0 ,   rfSettings.MCSM0 );
 438   1          halSpiWriteReg(CCxxx0_FOCCFG,   rfSettings.FOCCFG);
 439   1          halSpiWriteReg(CCxxx0_BSCFG,    rfSettings.BSCFG);
 440   1          halSpiWriteReg(CCxxx0_AGCCTRL2, rfSettings.AGCCTRL2);
 441   1              halSpiWriteReg(CCxxx0_AGCCTRL1, rfSettings.AGCCTRL1);
 442   1          halSpiWriteReg(CCxxx0_AGCCTRL0, rfSettings.AGCCTRL0);
 443   1          halSpiWriteReg(CCxxx0_FSCAL3,   rfSettings.FSCAL3);
 444   1              halSpiWriteReg(CCxxx0_FSCAL2,   rfSettings.FSCAL2);
 445   1              halSpiWriteReg(CCxxx0_FSCAL1,   rfSettings.FSCAL1);
 446   1          halSpiWriteReg(CCxxx0_FSCAL0,   rfSettings.FSCAL0);
 447   1          halSpiWriteReg(CCxxx0_FSTEST,   rfSettings.FSTEST);
 448   1          halSpiWriteReg(CCxxx0_TEST2,    rfSettings.TEST2);
 449   1          halSpiWriteReg(CCxxx0_TEST1,    rfSettings.TEST1);
 450   1          halSpiWriteReg(CCxxx0_TEST0,    rfSettings.TEST0);
 451   1          halSpiWriteReg(CCxxx0_IOCFG2,   rfSettings.IOCFG2);
 452   1          halSpiWriteReg(CCxxx0_IOCFG0,   rfSettings.IOCFG0);    
 453   1          halSpiWriteReg(CCxxx0_PKTCTRL1, rfSettings.PKTCTRL1);
 454   1          halSpiWriteReg(CCxxx0_PKTCTRL0, rfSettings.PKTCTRL0);
 455   1          halSpiWriteReg(CCxxx0_ADDR,     rfSettings.ADDR);
 456   1          halSpiWriteReg(CCxxx0_PKTLEN,   rfSettings.PKTLEN);
 457   1      }
 458          //*****************************************************************************************
 459          //函数名：void halRfSendPacket(INT8U *txBuffer, INT8U size)
 460          //输入：发送的缓冲区，发送数据个数
 461          //输出：无
 462          //功能描述：CC1100发送一组数据
 463          //*****************************************************************************************
 464          void halRfSendPacket(INT8U *txBuffer, INT8U size) 
 465          {
 466   1              halSpiWriteReg(CCxxx0_TXFIFO, size);
 467   1          halSpiWriteBurstReg(CCxxx0_TXFIFO, txBuffer, size); //写入要发送的数据
 468   1          halSpiStrobe(CCxxx0_STX);           //进入发送模式发送数据
 469   1          while (!GDO0);
 470   1          // Wait for GDO0 to be cleared -> end of packet
 471   1          while (GDO0);
 472   1              halSpiStrobe(CCxxx0_SFTX);
 473   1      }
 474          //*****************************************************************************************
 475          void setRxMode(void)
 476          {
 477   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 478   1      }
 479          //*****************************************************************************************
 480          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length) 
 481          {
 482   1          INT8U status[2];
 483   1          INT8U packetLength;
 484   1              INT8U i=(*length)*4;  // 具体多少要根据datarate和length来决定
 485   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 486   1              delay(2);
 487   1              while (GDO0)
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 9   

 488   1              {
 489   2                      delay(2);
 490   2                      --i;
 491   2                      if(i<1)
 492   2                         return 0;        
 493   2              }        
 494   1          if ((halSpiReadStatus(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)) //如果接的字节数不为0
 495   1              {
 496   2              packetLength = halSpiReadReg(CCxxx0_RXFIFO);//读出第一个字节，此字节为该帧数据长度
 497   2              if (packetLength <= *length)            //如果所要的有效数据长度小于等于接收到的数据包的长度
 498   2                      {
 499   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, rxBuffer, packetLength); //读出所有接收到的数据
 500   3                  *length = packetLength;                             //把接收数据长度的修改为当前数据的长度
 501   3              
 502   3                  // Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
 503   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, status, 2);       //读出CRC校验位
 504   3                              halSpiStrobe(CCxxx0_SFRX);              //清洗接收缓冲区
 505   3                  return (status[1] & CRC_OK);                        //如果校验成功返回接收成功
 506   3              }
 507   2                       else 
 508   2                      {
 509   3                  *length = packetLength;
 510   3                  halSpiStrobe(CCxxx0_SFRX);          //清洗接收缓冲区
 511   3                  return 0;
 512   3              }
 513   2          } 
 514   1              else
 515   1              return 0;
 516   1      }
 517          //--------------------------------------------------------------------------------------------------
 518          // 函数名称： UART_init()串口初始化函数
 519          // 函数功能： 在系统时钟为11.059MHZ时，设定串口波特率为9600bit/s
 520          //            串口接收中断允许，发送中断禁止
 521          //--------------------------------------------------------------------------------------------------
 522          void UART_init()
 523          {
 524   1                           //初始化串行口和波特率发生器 
 525   1              SCON =0x58;          //选择串口工作方式，打开接收允许
 526   1              TMOD =0x21;          //定时器1工作在方式2，定时器0工作在方式1
 527   1              TH1 =0xfd;           //实现波特率9600（系统时钟11.0592MHZ）
 528   1              TL1 =0xfd;
 529   1              TR1 =1;              //启动定时器T1
 530   1              ET1 =0; 
 531   1              ES=1;                //允许串行口中断
 532   1              PS=1;                //设计串行口中断优先级
 533   1              EA =1;               //单片机中断允许
 534   1      }
 535          //--------------------------------------------------------------------------------------------------
 536          // 函数名称： com_interrup()串口接收中断处理函数
 537          // 函数功能： 接收包括起始位'S'在内的十位数据到数据缓冲区
 538          //--------------------------------------------------------------------------------------------------
 539          com_interrupt(void) interrupt 4 using 3
 540          {
 541   1        if(RI)                                //处理接收中断
 542   1        {
 543   2              TxRxBuf1[m]=SBUF; 
 544   2              RI=0;                                //清除中断标志位
 545   2              m++;
 546   2        }
 547   1      if(m==32)              
 548   1        {
 549   2              m=0;
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 10  

 550   2              flag=1;
 551   2        }
 552   1      }
 553          /*********************************************************************************************************
             -*******
 554          函 数:   R_S_Byte(uchar R_Byte)
 555          功 能:   数据发送
 556          输 入:   ---------------
 557          输 出:   
 558          描 述:   
 559          **********************************************************************************************************
             -******/
 560          void R_S_Byte(char R_Byte)
 561          {       
 562   1               SBUF = R_Byte;  
 563   1           while( TI == 0 );                          //查询法
 564   1               TI = 0;   
 565   1      }
 566          /*********************************************************************************************************
             -*******/
 567          void main(void)
 568          {
 569   1              INT8U i;
 570   1              UART_init();
 571   1              CpuInit();
 572   1              POWER_UP_RESET_CC1100();
 573   1              halRfWriteRfSettings();
 574   1              halSpiWriteBurstReg(CCxxx0_PATABLE, PaTabel, 8);
 575   1              LED=1;
 576   1              m=0;flag=0;
 577   1              while(1)
 578   1              {
 579   2      /*********************************************************************************************************
             -*******/
 580   2                      if(flag==1)
 581   2                      {
 582   3                              halRfSendPacket(TxRxBuf1,32);   // 每当收到PC下传的32字节后就发送
 583   3                               flag=0;
 584   3                       } 
 585   2      /*********************************************************************************************************
             -*******/
 586   2                      if(halRfReceivePacket(TxRxBuf2,32))
 587   2                      {
 588   3                              LED=0;  
 589   3                              for(i=0;i<32;i++)
 590   3                                      {
 591   4                                      R_S_Byte(TxRxBuf2[i]);    //接收后通过串口显示检验
 592   4                                      }
 593   3                      }
 594   2                              LED=1;                          //LED闪烁，表示接收进行中
 595   2                      }
 596   1      
 597   1              
 598   1      }
 599          
 600          
 601          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    963    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V7.06   1100                                                                  09/14/2010 17:00:38 PAGE 11  

   XDATA SIZE       =     64    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
