C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE 1100
OBJECT MODULE PLACED IN 1100.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 1100.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #define         INT8U           unsigned char
   4          #define         INT16U          unsigned int
   5          
   6          #define         WRITE_BURST             0x40                                            //连续写入
   7          #define         READ_SINGLE             0x80                                            //读
   8          #define         READ_BURST              0xC0                                            //连续读
   9          #define         BYTES_IN_RXFIFO     0x7F                                                //接收缓冲区的有效字节数
  10          #define         CRC_OK              0x80                                                //CRC校验通过位标志
  11          //*****************************************************************************************
  12          sbit    GDO0    =P1^3;
  13          sbit    GDO2    =P3^2;
  14          sbit    MISO    =P1^6;
  15          sbit    MOSI    =P1^5;
  16          sbit    SCK             =P1^7;
  17          sbit    CSN             =P1^2;
  18          //*****************************************************************************************
  19          INT8U KEY0;
  20          //*****************************************************************************************
  21          sbit    led3=P2^3;
  22          sbit    led2=P2^2;
  23          sbit    led1=P2^1;
  24          sbit    led0=P2^0;
  25          //*****************************************************************************************
  26          INT8U PaTabel[8] = {0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60};
  27          //*****************************************************************************************
  28          INT8U seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
  29          //*****************************************************************************************
  30          void SpiInit(void);
  31          void CpuInit(void);
  32          void RESET_CC1100(void);
  33          void POWER_UP_RESET_CC1100(void);
  34          void halSpiWriteReg(INT8U addr, INT8U value);
  35          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  36          void halSpiStrobe(INT8U strobe);
  37          INT8U halSpiReadReg(INT8U addr);
  38          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  39          INT8U halSpiReadStatus(INT8U addr);
  40          void halRfWriteRfSettings(void);
  41          void halRfSendPacket(INT8U *txBuffer, INT8U size); 
  42          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length);  
  43          void UART_init();
  44          //*****************************************************************************************
  45          // CC1100 STROBE, CONTROL AND STATUS REGSITER
  46          #define CCxxx0_IOCFG2       0x00        // GDO2 output pin configuration
  47          #define CCxxx0_IOCFG1       0x01        // GDO1 output pin configuration
  48          #define CCxxx0_IOCFG0       0x02        // GDO0 output pin configuration
  49          #define CCxxx0_FIFOTHR      0x03        // RX FIFO and TX FIFO thresholds
  50          #define CCxxx0_SYNC1        0x04        // Sync word, high INT8U
  51          #define CCxxx0_SYNC0        0x05        // Sync word, low INT8U
  52          #define CCxxx0_PKTLEN       0x06        // Packet length
  53          #define CCxxx0_PKTCTRL1     0x07        // Packet automation control
  54          #define CCxxx0_PKTCTRL0     0x08        // Packet automation control
  55          #define CCxxx0_ADDR         0x09        // Device address
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 2   

  56          #define CCxxx0_CHANNR       0x0A        // Channel number
  57          #define CCxxx0_FSCTRL1      0x0B        // Frequency synthesizer control
  58          #define CCxxx0_FSCTRL0      0x0C        // Frequency synthesizer control
  59          #define CCxxx0_FREQ2        0x0D        // Frequency control word, high INT8U
  60          #define CCxxx0_FREQ1        0x0E        // Frequency control word, middle INT8U
  61          #define CCxxx0_FREQ0        0x0F        // Frequency control word, low INT8U
  62          #define CCxxx0_MDMCFG4      0x10        // Modem configuration
  63          #define CCxxx0_MDMCFG3      0x11        // Modem configuration
  64          #define CCxxx0_MDMCFG2      0x12        // Modem configuration
  65          #define CCxxx0_MDMCFG1      0x13        // Modem configuration
  66          #define CCxxx0_MDMCFG0      0x14        // Modem configuration
  67          #define CCxxx0_DEVIATN      0x15        // Modem deviation setting
  68          #define CCxxx0_MCSM2        0x16        // Main Radio Control State Machine configuration
  69          #define CCxxx0_MCSM1        0x17        // Main Radio Control State Machine configuration
  70          #define CCxxx0_MCSM0        0x18        // Main Radio Control State Machine configuration
  71          #define CCxxx0_FOCCFG       0x19        // Frequency Offset Compensation configuration
  72          #define CCxxx0_BSCFG        0x1A        // Bit Synchronization configuration
  73          #define CCxxx0_AGCCTRL2     0x1B        // AGC control
  74          #define CCxxx0_AGCCTRL1     0x1C        // AGC control
  75          #define CCxxx0_AGCCTRL0     0x1D        // AGC control
  76          #define CCxxx0_WOREVT1      0x1E        // High INT8U Event 0 timeout
  77          #define CCxxx0_WOREVT0      0x1F        // Low INT8U Event 0 timeout
  78          #define CCxxx0_WORCTRL      0x20        // Wake On Radio control
  79          #define CCxxx0_FREND1       0x21        // Front end RX configuration
  80          #define CCxxx0_FREND0       0x22        // Front end TX configuration
  81          #define CCxxx0_FSCAL3       0x23        // Frequency synthesizer calibration
  82          #define CCxxx0_FSCAL2       0x24        // Frequency synthesizer calibration
  83          #define CCxxx0_FSCAL1       0x25        // Frequency synthesizer calibration
  84          #define CCxxx0_FSCAL0       0x26        // Frequency synthesizer calibration
  85          #define CCxxx0_RCCTRL1      0x27        // RC oscillator configuration
  86          #define CCxxx0_RCCTRL0      0x28        // RC oscillator configuration
  87          #define CCxxx0_FSTEST       0x29        // Frequency synthesizer calibration control
  88          #define CCxxx0_PTEST        0x2A        // Production test
  89          #define CCxxx0_AGCTEST      0x2B        // AGC test
  90          #define CCxxx0_TEST2        0x2C        // Various test settings
  91          #define CCxxx0_TEST1        0x2D        // Various test settings
  92          #define CCxxx0_TEST0        0x2E        // Various test settings
  93          
  94          // Strobe commands
  95          #define CCxxx0_SRES         0x30        // Reset chip.
  96          #define CCxxx0_SFSTXON      0x31        // Enable and calibrate frequency synthesizer (if MCSM0.FS_AUTOCAL
             -=1).
  97                                                  // If in RX/TX: Go to a wait state where only the synthesizer is
  98                                                  // running (for quick RX / TX turnaround).
  99          #define CCxxx0_SXOFF        0x32        // Turn off crystal oscillator.
 100          #define CCxxx0_SCAL         0x33        // Calibrate frequency synthesizer and turn it off
 101                                                  // (enables quick start).
 102          #define CCxxx0_SRX          0x34        // Enable RX. Perform calibration first if coming from IDLE and
 103                                                  // MCSM0.FS_AUTOCAL=1.
 104          #define CCxxx0_STX          0x35        // In IDLE state: Enable TX. Perform calibration first if
 105                                                  // MCSM0.FS_AUTOCAL=1. If in RX state and CCA is enabled:
 106                                                  // Only go to TX if channel is clear.
 107          #define CCxxx0_SIDLE        0x36        // Exit RX / TX, turn off frequency synthesizer and exit
 108                                                  // Wake-On-Radio mode if applicable.
 109          #define CCxxx0_SAFC         0x37        // Perform AFC adjustment of the frequency synthesizer
 110          #define CCxxx0_SWOR         0x38        // Start automatic RX polling sequence (Wake-on-Radio)
 111          #define CCxxx0_SPWD         0x39        // Enter power down mode when CSn goes high.
 112          #define CCxxx0_SFRX         0x3A        // Flush the RX FIFO buffer.
 113          #define CCxxx0_SFTX         0x3B        // Flush the TX FIFO buffer.
 114          #define CCxxx0_SWORRST      0x3C        // Reset real time clock.
 115          #define CCxxx0_SNOP         0x3D        // No operation. May be used to pad strobe commands to two
 116                                                  // INT8Us for simpler software.
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 3   

 117          
 118          #define CCxxx0_PARTNUM      0x30
 119          #define CCxxx0_VERSION      0x31
 120          #define CCxxx0_FREQEST      0x32
 121          #define CCxxx0_LQI          0x33
 122          #define CCxxx0_RSSI         0x34
 123          #define CCxxx0_MARCSTATE    0x35
 124          #define CCxxx0_WORTIME1     0x36
 125          #define CCxxx0_WORTIME0     0x37
 126          #define CCxxx0_PKTSTATUS    0x38
 127          #define CCxxx0_VCO_VC_DAC   0x39
 128          #define CCxxx0_TXBYTES      0x3A
 129          #define CCxxx0_RXBYTES      0x3B
 130          
 131          #define CCxxx0_PATABLE      0x3E
 132          #define CCxxx0_TXFIFO       0x3F
 133          #define CCxxx0_RXFIFO       0x3F
 134          
 135          // RF_SETTINGS is a data structure which contains all relevant CCxxx0 registers
 136          typedef struct S_RF_SETTINGS
 137          {
 138                  INT8U FSCTRL2;          //自已加的
 139              INT8U FSCTRL1;   // Frequency synthesizer control.
 140              INT8U FSCTRL0;   // Frequency synthesizer control.
 141              INT8U FREQ2;     // Frequency control word, high INT8U.
 142              INT8U FREQ1;     // Frequency control word, middle INT8U.
 143              INT8U FREQ0;     // Frequency control word, low INT8U.
 144              INT8U MDMCFG4;   // Modem configuration.
 145              INT8U MDMCFG3;   // Modem configuration.
 146              INT8U MDMCFG2;   // Modem configuration.
 147              INT8U MDMCFG1;   // Modem configuration.
 148              INT8U MDMCFG0;   // Modem configuration.
 149              INT8U CHANNR;    // Channel number.
 150              INT8U DEVIATN;   // Modem deviation setting (when FSK modulation is enabled).
 151              INT8U FREND1;    // Front end RX configuration.
 152              INT8U FREND0;    // Front end RX configuration.
 153              INT8U MCSM0;     // Main Radio Control State Machine configuration.
 154              INT8U FOCCFG;    // Frequency Offset Compensation Configuration.
 155              INT8U BSCFG;     // Bit synchronization Configuration.
 156              INT8U AGCCTRL2;  // AGC control.
 157                  INT8U AGCCTRL1;  // AGC control.
 158              INT8U AGCCTRL0;  // AGC control.
 159              INT8U FSCAL3;    // Frequency synthesizer calibration.
 160              INT8U FSCAL2;    // Frequency synthesizer calibration.
 161                  INT8U FSCAL1;    // Frequency synthesizer calibration.
 162              INT8U FSCAL0;    // Frequency synthesizer calibration.
 163              INT8U FSTEST;    // Frequency synthesizer calibration control
 164              INT8U TEST2;     // Various test settings.
 165              INT8U TEST1;     // Various test settings.
 166              INT8U TEST0;     // Various test settings.
 167              INT8U IOCFG2;    // GDO2 output pin configuration
 168              INT8U IOCFG0;    // GDO0 output pin configuration
 169              INT8U PKTCTRL1;  // Packet automation control.
 170              INT8U PKTCTRL0;  // Packet automation control.
 171              INT8U ADDR;      // Device address.
 172              INT8U PKTLEN;    // Packet length.
 173          } RF_SETTINGS;
 174          
 175          /////////////////////////////////////////////////////////////////
 176          const RF_SETTINGS rfSettings = 
 177          {
 178                  0x00,
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 4   

 179              0x08,   // FSCTRL1   Frequency synthesizer control.
 180              0x00,   // FSCTRL0   Frequency synthesizer control.
 181              0x10,   // FREQ2     Frequency control word, high byte.
 182              0xA7,   // FREQ1     Frequency control word, middle byte.
 183              0x62,   // FREQ0     Frequency control word, low byte.
 184              0x5B,   // MDMCFG4   Modem configuration.
 185              0xF8,   // MDMCFG3   Modem configuration.
 186              0x03,   // MDMCFG2   Modem configuration.
 187              0x22,   // MDMCFG1   Modem configuration.
 188              0xF8,   // MDMCFG0   Modem configuration.
 189          
 190              0x00,   // CHANNR    Channel number.
 191              0x47,   // DEVIATN   Modem deviation setting (when FSK modulation is enabled).
 192              0xB6,   // FREND1    Front end RX configuration.
 193              0x10,   // FREND0    Front end RX configuration.
 194              0x18,   // MCSM0     Main Radio Control State Machine configuration.
 195              0x1D,   // FOCCFG    Frequency Offset Compensation Configuration.
 196              0x1C,   // BSCFG     Bit synchronization Configuration.
 197              0xC7,   // AGCCTRL2  AGC control.
 198              0x00,   // AGCCTRL1  AGC control.
 199              0xB2,   // AGCCTRL0  AGC control.
 200          
 201              0xEA,   // FSCAL3    Frequency synthesizer calibration.
 202              0x2A,   // FSCAL2    Frequency synthesizer calibration.
 203              0x00,   // FSCAL1    Frequency synthesizer calibration.
 204              0x11,   // FSCAL0    Frequency synthesizer calibration.
 205              0x59,   // FSTEST    Frequency synthesizer calibration.
 206              0x81,   // TEST2     Various test settings.
 207              0x35,   // TEST1     Various test settings.
 208              0x09,   // TEST0     Various test settings.
 209              0x0B,   // IOCFG2    GDO2 output pin configuration.
 210              0x06,   // IOCFG0D   GDO0 output pin configuration. Refer to SmartRF?Studio User Manual for detailed p
             -seudo register explanation.
 211          
 212              0x04,   // PKTCTRL1  Packet automation control.
 213              0x05,   // PKTCTRL0  Packet automation control.
 214              0x00,   // ADDR      Device address.
 215              0x0c    // PKTLEN    Packet length.
 216          };
 217          //*****************************************************************************************
 218          //函数名：delay(unsigned int s)
 219          //输入：时间
 220          //输出：无
 221          //功能描述：普通廷时,内部用
 222          //*****************************************************************************************             
 223          static void delay(unsigned int s)
 224          {
 225   1              unsigned int i;
 226   1              for(i=0; i<s; i++);
 227   1              for(i=0; i<s; i++);
 228   1      }
 229          
 230          
 231          void halWait(INT16U timeout) {
 232   1          do {
 233   2              _nop_();
 234   2                      _nop_();
 235   2                      _nop_();
 236   2                      _nop_();
 237   2                      _nop_();
 238   2                      _nop_();
 239   2                      _nop_();
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 5   

 240   2                      _nop_();
 241   2                      _nop_();
 242   2                      _nop_();
 243   2                      _nop_();
 244   2                      _nop_();
 245   2                      _nop_();
 246   2                      _nop_();
 247   2                      _nop_(); 
 248   2          } while (--timeout);
 249   1      }
 250          
 251          
 252          void SpiInit(void)
 253          {
 254   1              CSN=0;
 255   1              SCK=0;
 256   1              CSN=1;
 257   1      }
 258          
 259          /*****************************************************************************************
 260          //函数名：CpuInit()
 261          //输入：无
 262          //输出：无
 263          //功能描述：SPI初始化程序
 264          /*****************************************************************************************/
 265          void CpuInit(void)
 266          {
 267   1              SpiInit();
 268   1              delay(5000);
 269   1      }
 270                  
 271          
 272          //*****************************************************************************************
 273          //函数名：SpisendByte(INT8U dat)
 274          //输入：发送的数据
 275          //输出：无
 276          //功能描述：SPI发送一个字节
 277          //*****************************************************************************************
 278          INT8U SpiTxRxByte(INT8U dat)
 279          {
 280   1              INT8U i,temp;
 281   1              temp = 0;
 282   1              
 283   1              SCK = 0;
 284   1              for(i=0; i<8; i++)
 285   1              {
 286   2                      if(dat & 0x80)
 287   2                      {
 288   3                              MOSI = 1;
 289   3                      }
 290   2                      else MOSI = 0;
 291   2                      dat <<= 1;
 292   2      
 293   2                      SCK = 1; 
 294   2                      _nop_();
 295   2                      _nop_();
 296   2      
 297   2                      temp <<= 1;
 298   2                      if(MISO)temp++; 
 299   2                      SCK = 0;
 300   2                      _nop_();
 301   2                      _nop_();        
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 6   

 302   2              }
 303   1              return temp;
 304   1      }
 305          
 306          //*****************************************************************************************
 307          //函数名：void RESET_CC1100(void)
 308          //输入：无
 309          //输出：无
 310          //功能描述：复位CC1100
 311          //*****************************************************************************************
 312          void RESET_CC1100(void) 
 313          {
 314   1              CSN = 0; 
 315   1              while (MISO);
 316   1          SpiTxRxByte(CCxxx0_SRES);           //写入复位命令
 317   1              while (MISO); 
 318   1          CSN = 1; 
 319   1      }
 320          
 321          //*****************************************************************************************
 322          //函数名：void POWER_UP_RESET_CC1100(void) 
 323          //输入：无
 324          //输出：无
 325          //功能描述：上电复位CC1100
 326          //*****************************************************************************************
 327          void POWER_UP_RESET_CC1100(void) 
 328          {
 329   1              CSN = 1; 
 330   1              halWait(1); 
 331   1              CSN = 0; 
 332   1              halWait(1); 
 333   1              CSN = 1; 
 334   1              halWait(41); 
 335   1              RESET_CC1100();                 //复位CC1100
 336   1      }
 337          
 338          //*****************************************************************************************
 339          //函数名：void halSpiWriteReg(INT8U addr, INT8U value)
 340          //输入：地址和配置字
 341          //输出：无
 342          //功能描述：SPI写寄存器
 343          //*****************************************************************************************
 344          void halSpiWriteReg(INT8U addr, INT8U value) 
 345          {
 346   1          CSN = 0;
 347   1          while (MISO);
 348   1          SpiTxRxByte(addr);          //写地址
 349   1          SpiTxRxByte(value);         //写入配置
 350   1          CSN = 1;
 351   1      }
 352          
 353          //*****************************************************************************************
 354          //函数名：void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 355          //输入：地址，写入缓冲区，写入个数
 356          //输出：无
 357          //功能描述：SPI连续写配置寄存器
 358          //*****************************************************************************************
 359          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 360          {
 361   1          INT8U i, temp;
 362   1              temp = addr | WRITE_BURST;
 363   1          CSN = 0;
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 7   

 364   1          while (MISO);
 365   1          SpiTxRxByte(temp);
 366   1          for (i = 0; i < count; i++)
 367   1              {
 368   2              SpiTxRxByte(buffer[i]);
 369   2          }
 370   1          CSN = 1;
 371   1      }
 372          
 373          //*****************************************************************************************
 374          //函数名：void halSpiStrobe(INT8U strobe)
 375          //输入：命令
 376          //输出：无
 377          //功能描述：SPI写命令
 378          //*****************************************************************************************
 379          void halSpiStrobe(INT8U strobe) 
 380          {
 381   1          CSN = 0;
 382   1          while (MISO);
 383   1          SpiTxRxByte(strobe);                //写入命令
 384   1          CSN = 1;
 385   1      }
 386          
 387          
 388          
 389          
 390          
 391          //*****************************************************************************************
 392          //函数名：INT8U halSpiReadReg(INT8U addr)
 393          //输入：地址
 394          //输出：该寄存器的配置字
 395          //功能描述：SPI读寄存器
 396          //*****************************************************************************************
 397          INT8U halSpiReadReg(INT8U addr) 
 398          {
 399   1              INT8U temp, value;
 400   1          temp = addr|READ_SINGLE;//读寄存器命令
 401   1              CSN = 0;
 402   1              while (MISO);
 403   1              SpiTxRxByte(temp);
 404   1              value = SpiTxRxByte(0);
 405   1              CSN = 1;
 406   1              return value;
 407   1      }
 408          
 409          
 410          //*****************************************************************************************
 411          //函数名：void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 412          //输入：地址，读出数据后暂存的缓冲区，读出配置个数
 413          //输出：无
 414          //功能描述：SPI连续写配置寄存器
 415          //*****************************************************************************************
 416          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 417          {
 418   1          INT8U i,temp;
 419   1              temp = addr | READ_BURST;               //写入要读的配置寄存器地址和读命令
 420   1          CSN = 0;
 421   1          while (MISO);
 422   1              SpiTxRxByte(temp);   
 423   1          for (i = 0; i < count; i++) 
 424   1              {
 425   2              buffer[i] = SpiTxRxByte(0);
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 8   

 426   2          }
 427   1          CSN = 1;
 428   1      }
 429          
 430          
 431          //*****************************************************************************************
 432          //函数名：INT8U halSpiReadReg(INT8U addr)
 433          //输入：地址
 434          //输出：该状态寄存器当前值
 435          //功能描述：SPI读状态寄存器
 436          //*****************************************************************************************
 437          INT8U halSpiReadStatus(INT8U addr) 
 438          {
 439   1          INT8U value,temp;
 440   1              temp = addr | READ_BURST;               //写入要读的状态寄存器的地址同时写入读命令
 441   1          CSN = 0;
 442   1          while (MISO);
 443   1          SpiTxRxByte(temp);
 444   1              value = SpiTxRxByte(0);
 445   1              CSN = 1;
 446   1              return value;
 447   1      }
 448          //*****************************************************************************************
 449          //函数名：void halRfWriteRfSettings(RF_SETTINGS *pRfSettings)
 450          //输入：无
 451          //输出：无
 452          //功能描述：配置CC1100的寄存器
 453          //*****************************************************************************************
 454          void halRfWriteRfSettings(void) 
 455          {
 456   1      
 457   1              halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL2);//自已加的
 458   1          // Write register settings
 459   1          halSpiWriteReg(CCxxx0_FSCTRL1,  rfSettings.FSCTRL1);
 460   1          halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL0);
 461   1          halSpiWriteReg(CCxxx0_FREQ2,    rfSettings.FREQ2);
 462   1          halSpiWriteReg(CCxxx0_FREQ1,    rfSettings.FREQ1);
 463   1          halSpiWriteReg(CCxxx0_FREQ0,    rfSettings.FREQ0);
 464   1          halSpiWriteReg(CCxxx0_MDMCFG4,  rfSettings.MDMCFG4);
 465   1          halSpiWriteReg(CCxxx0_MDMCFG3,  rfSettings.MDMCFG3);
 466   1          halSpiWriteReg(CCxxx0_MDMCFG2,  rfSettings.MDMCFG2);
 467   1          halSpiWriteReg(CCxxx0_MDMCFG1,  rfSettings.MDMCFG1);
 468   1          halSpiWriteReg(CCxxx0_MDMCFG0,  rfSettings.MDMCFG0);
 469   1          halSpiWriteReg(CCxxx0_CHANNR,   rfSettings.CHANNR);
 470   1          halSpiWriteReg(CCxxx0_DEVIATN,  rfSettings.DEVIATN);
 471   1          halSpiWriteReg(CCxxx0_FREND1,   rfSettings.FREND1);
 472   1          halSpiWriteReg(CCxxx0_FREND0,   rfSettings.FREND0);
 473   1          halSpiWriteReg(CCxxx0_MCSM0 ,   rfSettings.MCSM0 );
 474   1          halSpiWriteReg(CCxxx0_FOCCFG,   rfSettings.FOCCFG);
 475   1          halSpiWriteReg(CCxxx0_BSCFG,    rfSettings.BSCFG);
 476   1          halSpiWriteReg(CCxxx0_AGCCTRL2, rfSettings.AGCCTRL2);
 477   1              halSpiWriteReg(CCxxx0_AGCCTRL1, rfSettings.AGCCTRL1);
 478   1          halSpiWriteReg(CCxxx0_AGCCTRL0, rfSettings.AGCCTRL0);
 479   1          halSpiWriteReg(CCxxx0_FSCAL3,   rfSettings.FSCAL3);
 480   1              halSpiWriteReg(CCxxx0_FSCAL2,   rfSettings.FSCAL2);
 481   1              halSpiWriteReg(CCxxx0_FSCAL1,   rfSettings.FSCAL1);
 482   1          halSpiWriteReg(CCxxx0_FSCAL0,   rfSettings.FSCAL0);
 483   1          halSpiWriteReg(CCxxx0_FSTEST,   rfSettings.FSTEST);
 484   1          halSpiWriteReg(CCxxx0_TEST2,    rfSettings.TEST2);
 485   1          halSpiWriteReg(CCxxx0_TEST1,    rfSettings.TEST1);
 486   1          halSpiWriteReg(CCxxx0_TEST0,    rfSettings.TEST0);
 487   1          halSpiWriteReg(CCxxx0_IOCFG2,   rfSettings.IOCFG2);
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 9   

 488   1          halSpiWriteReg(CCxxx0_IOCFG0,   rfSettings.IOCFG0);    
 489   1          halSpiWriteReg(CCxxx0_PKTCTRL1, rfSettings.PKTCTRL1);
 490   1          halSpiWriteReg(CCxxx0_PKTCTRL0, rfSettings.PKTCTRL0);
 491   1          halSpiWriteReg(CCxxx0_ADDR,     rfSettings.ADDR);
 492   1          halSpiWriteReg(CCxxx0_PKTLEN,   rfSettings.PKTLEN);
 493   1      }
 494          
 495          //*****************************************************************************************
 496          //函数名：void halRfSendPacket(INT8U *txBuffer, INT8U size)
 497          //输入：发送的缓冲区，发送数据个数
 498          //输出：无
 499          //功能描述：CC1100发送一组数据
 500          //*****************************************************************************************
 501          
 502          void halRfSendPacket(INT8U *txBuffer, INT8U size) 
 503          {
 504   1              halSpiWriteReg(CCxxx0_TXFIFO, size);
 505   1          halSpiWriteBurstReg(CCxxx0_TXFIFO, txBuffer, size); //写入要发送的数据
 506   1      
 507   1          halSpiStrobe(CCxxx0_STX);           //进入发送模式发送数据
 508   1      
 509   1          // Wait for GDO0 to be set -> sync transmitted
 510   1          while (!GDO0);
 511   1          // Wait for GDO0 to be cleared -> end of packet
 512   1          while (GDO0);
 513   1              halSpiStrobe(CCxxx0_SFTX);
 514   1      }
 515          
 516          
 517          void setRxMode(void)
 518          {
 519   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 520   1      }
 521          
 522          /*
 523          // Bit masks corresponding to STATE[2:0] in the status byte returned on MISO
 524          #define CCxx00_STATE_BM                 0x70
 525          #define CCxx00_FIFO_BYTES_AVAILABLE_BM  0x0F
 526          #define CCxx00_STATE_TX_BM              0x20
 527          #define CCxx00_STATE_TX_UNDERFLOW_BM    0x70
 528          #define CCxx00_STATE_RX_BM              0x10
 529          #define CCxx00_STATE_RX_OVERFLOW_BM     0x60
 530          #define CCxx00_STATE_IDLE_BM            0x00
 531          
 532          static INT8U RfGetRxStatus(void)
 533          {
 534                  INT8U temp, spiRxStatus1,spiRxStatus2;
 535                  INT8U i=4;// 循环测试次数
 536              temp = CCxxx0_SNOP|READ_SINGLE;//读寄存器命令
 537                  CSN = 0;
 538                  while (MISO);
 539                  SpiTxRxByte(temp);
 540                  spiRxStatus1 = SpiTxRxByte(0);
 541                  do
 542                  {
 543                          SpiTxRxByte(temp);
 544                          spiRxStatus2 = SpiTxRxByte(0);
 545                          if(spiRxStatus1 == spiRxStatus2)
 546                          {
 547                                  if( (spiRxStatus1 & CCxx00_STATE_BM) == CCxx00_STATE_RX_OVERFLOW_BM)
 548                                  {
 549                         halSpiStrobe(CCxxx0_SFRX);
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 10  

 550                                     return 0;
 551                                  }
 552                              return 1;
 553                          }
 554                           spiRxStatus1=spiRxStatus2;
 555                  }
 556                  while(i--);
 557                  CSN = 1;
 558              return 0;   
 559          }
 560           */
 561          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length) 
 562          {
 563   1          INT8U status[2];
 564   1          INT8U packetLength;
 565   1              INT8U i=(*length)*4;  // 具体多少要根据datarate和length来决定
 566   1      
 567   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 568   1              //delay(5);
 569   1          //while (!GDO1);
 570   1          //while (GDO1);
 571   1              delay(2);
 572   1              while (GDO0)
 573   1              {
 574   2                      delay(2);
 575   2                      --i;
 576   2                      if(i<1)
 577   2                         return 0;        
 578   2              }        
 579   1          if ((halSpiReadStatus(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)) //如果接的字节数不为0
 580   1              {
 581   2              packetLength = halSpiReadReg(CCxxx0_RXFIFO);//读出第一个字节，此字节为该帧数据长度
 582   2              if (packetLength <= *length)            //如果所要的有效数据长度小于等于接收到的数据包的长度
 583   2                      {
 584   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, rxBuffer, packetLength); //读出所有接收到的数据
 585   3                  *length = packetLength;                             //把接收数据长度的修改为当前数据的长度
 586   3              
 587   3                  // Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
 588   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, status, 2);       //读出CRC校验位
 589   3                              halSpiStrobe(CCxxx0_SFRX);              //清洗接收缓冲区
 590   3                  return (status[1] & CRC_OK);                        //如果校验成功返回接收成功
 591   3              }
 592   2                       else 
 593   2                      {
 594   3                  *length = packetLength;
 595   3                  halSpiStrobe(CCxxx0_SFRX);          //清洗接收缓冲区
 596   3                  return 0;
 597   3              }
 598   2          } 
 599   1              else
 600   1              return 0;
 601   1      }
 602          //--------------------------------------------------------------------------------------------------
 603          // 函数名称： UART_init()串口初始化函数
 604          // 函数功能： 在系统时钟为11.059MHZ时，设定串口波特率为9600bit/s
 605          //            串口接收中断允许，发送中断禁止
 606          //--------------------------------------------------------------------------------------------------
 607          void UART_init()
 608          {
 609   1                           //初始化串行口和波特率发生器 
 610   1      SCON =0x58;          //选择串口工作方式，打开接收允许
 611   1      TMOD =0x21;          //定时器1工作在方式2，定时器0工作在方式1
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 11  

 612   1      TH1 =0xfd;           //实现波特率9600（系统时钟11.0592MHZ）
 613   1      TL1 =0xfd;
 614   1      TR1 =1;              //启动定时器T1
 615   1      ET1 =0; 
 616   1      ES=1;                //允许串行口中断
 617   1      PS=1;                //设计串行口中断优先级
 618   1      EA =1;               //单片机中断允许
 619   1      }
 620          //--------------------------------------------------------------------------------------------------
 621          // 函数名称： com_interrup()串口接收中断处理函数
 622          // 函数功能： 接收包括起始位'S'在内的十位数据到数据缓冲区
 623          //--------------------------------------------------------------------------------------------------
 624          com_interrupt(void) interrupt 4 using 3
 625          {
 626   1       // char  RECEIVR_buffer;
 627   1        if(RI)                                //处理接收中断
 628   1        {
 629   2        RI=0;                                //清除中断标志位
 630   2        KEY0=SBUF;
 631   2        SBUF=KEY0;
 632   2      }
 633   1      }
 634          //*************************************************************************************
 635          void main(void)
 636          {
 637   1              INT8U i,leng =4;
 638   1              INT8U tf =0;
 639   1              INT8U TxBuf[4]={0};      // 8字节, 如果需要更长的数据包,请正确设置
 640   1              INT8U RxBuf[4]={0};     
 641   1              CpuInit();
 642   1              POWER_UP_RESET_CC1100();
 643   1              halRfWriteRfSettings();
 644   1              halSpiWriteBurstReg(CCxxx0_PATABLE, PaTabel, 8);
 645   1      
 646   1              //TxBuf[0] = 8 ;
 647   1      //      TxBuf[1] = 1 ;
 648   1      //      TxBuf[2] = 1 ;
 649   1      //      halRfSendPacket(TxBuf,8);       // Transmit Tx buffer data
 650   1              delay(6000);
 651   1              P0=0xBF;
 652   1              led0=0;led1=0;led2=0;led3=0;
 653   1              UART_init();
 654   1              while(1)
 655   1              {
 656   2      
 657   2      if(KEY0==48)                                            //有键按下0
 658   2                              {
 659   3                                       TxBuf[0]=0x01;
 660   3                                       TxBuf[1]=0x02;
 661   3                                       TxBuf[2]=0x03;
 662   3                                       TxBuf[3]=0x04;  
 663   3                              P0= seg[0];
 664   3                                      led0=1;
 665   3                                      led1=1;
 666   3                                      led2=1;
 667   3                                      led3=0;
 668   3      for(i=0;i<2;i++)
 669   3      {   
 670   4              halRfSendPacket(TxBuf,leng);    // Transmit Tx buffer data
 671   4      }
 672   3      
 673   3               TxBuf[1]=0;   
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 12  

 674   3                      //      Delay(250);
 675   3                                      }
 676   2                      if(KEY0==49)                                            //有键按下1
 677   2                              {
 678   3                                       TxBuf[0]=0x11;
 679   3                                       TxBuf[1]=0x12;
 680   3                                       TxBuf[2]=0x13;
 681   3                                       TxBuf[3]=0x14;  
 682   3                              P0= seg[1];
 683   3                                      led0=1;
 684   3                                      led1=1;
 685   3                                      led2=0;
 686   3                                      led3=1;
 687   3      for(i=0;i<2;i++)
 688   3      {
 689   4          
 690   4              halRfSendPacket(TxBuf,leng);    // Transmit Tx buffer data           
 691   4      }
 692   3                       TxBuf[2]=0;    //      Delay(250);
 693   3                                      }
 694   2                                       if(KEY0==50)                                           //有键按下2
 695   2                              {
 696   3                                       TxBuf[0]=0x21;
 697   3                                       TxBuf[1]=0x22;
 698   3                                       TxBuf[2]=0x23;
 699   3                                       TxBuf[3]=0x24;    
 700   3                              P0= seg[2];
 701   3                                      led0=1;
 702   3                                      led1=0;
 703   3                                      led2=1;
 704   3                                      led3=1;
 705   3      for(i=0;i<2;i++)
 706   3      {
 707   4              halRfSendPacket(TxBuf,leng);           
 708   4      }
 709   3                              //      Delay(250);
 710   3                              }       
 711   2                      if(KEY0==51)                                            //有键按下3
 712   2                              {
 713   3                                      TxBuf[0]=0x31;
 714   3                                      TxBuf[1]=0x32;
 715   3                                      TxBuf[2]=0x33;
 716   3                                      TxBuf[3]=0x34;  
 717   3                              P0= seg[3];
 718   3                                      led0=0;
 719   3                                      led1=1;
 720   3                                      led2=1;
 721   3                                      led3=1;
 722   3      for(i=0;i<2;i++)
 723   3      {
 724   4              halRfSendPacket(TxBuf,leng);         
 725   4      }
 726   3                      //      Delay(250);
 727   3                                      }
 728   2                                                      if(KEY0==52)                                            //有键按下4
 729   2                              {
 730   3                                      TxBuf[0]=0x41;
 731   3                                      TxBuf[1]=0x42;
 732   3                                      TxBuf[2]=0x43;
 733   3                                      TxBuf[3]=0x44;  
 734   3                              P0= seg[4];
 735   3                                      led0=1;
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 13  

 736   3                                      led1=1;
 737   3                                      led2=1;
 738   3                                      led3=0;
 739   3      for(i=0;i<2;i++)
 740   3      {
 741   4              halRfSendPacket(TxBuf,leng);           
 742   4      }
 743   3                      //      Delay(250);
 744   3                                      }
 745   2                                                      if(KEY0==53)                                            //有键按下5
 746   2                              {
 747   3                                      TxBuf[0]=0x51;
 748   3                                      TxBuf[1]=0x52;
 749   3                                      TxBuf[2]=0x53;
 750   3                                      TxBuf[3]=0x54;  
 751   3                              P0= seg[5];
 752   3                                      led0=1;
 753   3                                      led1=1;
 754   3                                      led2=0;
 755   3                                      led3=1;
 756   3      for(i=0;i<2;i++)
 757   3      {
 758   4              halRfSendPacket(TxBuf,leng);    // Transmit Tx buffer data             
 759   4      }
 760   3                      //      Delay(250);
 761   3                                      }
 762   2                                                      if(KEY0==54)                                            //有键按下6
 763   2                              {
 764   3                                      TxBuf[0]=0x61;
 765   3                                      TxBuf[1]=0x62;
 766   3                                      TxBuf[2]=0x63;
 767   3                                      TxBuf[3]=0x64;  
 768   3                              P0= seg[6];
 769   3                                      led0=1;
 770   3                                      led1=0;
 771   3                                      led2=1;
 772   3                                      led3=1;
 773   3      for(i=0;i<2;i++)
 774   3      {
 775   4              halRfSendPacket(TxBuf,leng);             
 776   4      }
 777   3                      //      Delay(250);
 778   3                                      }
 779   2                                                      if(KEY0==55)                                            //有键按下7
 780   2                              {
 781   3                                      TxBuf[0]=0x71;
 782   3                                      TxBuf[1]=0x72;
 783   3                                      TxBuf[2]=0x73;
 784   3                                      TxBuf[3]=0x74;  
 785   3                              P0= seg[7];
 786   3                                      led0=0;
 787   3                                      led1=1;
 788   3                                      led2=1;
 789   3                                      led3=1;
 790   3      for(i=0;i<2;i++)
 791   3      {
 792   4              halRfSendPacket(TxBuf,leng);       
 793   4      }
 794   3                      //      Delay(250);
 795   3                                      }
 796   2                                                      if(KEY0==56)                                            //有键按下8
 797   2                              {
C51 COMPILER V7.06   1100                                                                  12/20/2007 00:13:08 PAGE 14  

 798   3                                      TxBuf[0]=0x81;
 799   3                                      TxBuf[1]=0x82;
 800   3                                      TxBuf[2]=0x83;
 801   3                                      TxBuf[3]=0x84;  
 802   3                              P0= seg[8];
 803   3                                      led0=1;
 804   3                                      led1=1;
 805   3                                      led2=1;
 806   3                                      led3=0;
 807   3      for(i=0;i<2;i++)
 808   3      {
 809   4              halRfSendPacket(TxBuf,leng);    // Transmit Tx buffer data           
 810   4      }
 811   3                      //      Delay(250);
 812   3                                      }
 813   2                                                      if(KEY0==57)                                            //有键按下9
 814   2                              {
 815   3                                      TxBuf[0]=0x91;
 816   3                                      TxBuf[1]=0x92;
 817   3                                      TxBuf[2]=0x93;
 818   3                                      TxBuf[3]=0x94;  
 819   3                              P0= seg[9];
 820   3                                      led0=1;
 821   3                                      led1=1;
 822   3                                      led2=0;
 823   3                                      led3=1;
 824   3                      for(i=0;i<2;i++)
 825   3                      {
 826   4                              halRfSendPacket(TxBuf,leng);
 827   4                      }
 828   3      }
 829   2      }
 830   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1347    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54      31
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
