C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE 1100
OBJECT MODULE PLACED IN 1100.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 1100.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #define         INT8U           unsigned char
   4          #define         INT16U          unsigned int
   5          
   6          #define         WRITE_BURST             0x40                                            //连续写入
   7          #define         READ_SINGLE             0x80                                            //读
   8          #define         READ_BURST              0xC0                                            //连续读
   9          #define         BYTES_IN_RXFIFO     0x7F                                                //接收缓冲区的有效字节数
  10          #define         CRC_OK              0x80                                                //CRC校验通过位标志
  11          //*****************************************************************************************
  12          sbit    GDO0    =P1^3;
  13          sbit    GDO2    =P3^2;
  14          sbit    MISO    =P1^6;
  15          sbit    MOSI    =P1^5;
  16          sbit    SCK             =P1^7;
  17          sbit    CSN             =P1^2;
  18          //*****************************************************************************************
  19          sbit    LED2    =P3^4;
  20          sbit    LED1    =P3^5;
  21          sbit    KEY1    =P3^6;
  22          sbit    KEY2    =P3^7;
  23          //*****************************************************************************************
  24          sbit    led3=P2^3;
  25          sbit    led2=P2^2;
  26          sbit    led1=P2^1;
  27          sbit    led0=P2^0;
  28          //*****************************************************************************************
  29          INT8U PaTabel[8] = {0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60};
  30          //*****************************************************************************************
  31          void SpiInit(void);
  32          void CpuInit(void);
  33          void RESET_CC1100(void);
  34          void POWER_UP_RESET_CC1100(void);
  35          void halSpiWriteReg(INT8U addr, INT8U value);
  36          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  37          void halSpiStrobe(INT8U strobe);
  38          INT8U halSpiReadReg(INT8U addr);
  39          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  40          INT8U halSpiReadStatus(INT8U addr);
  41          void halRfWriteRfSettings(void);
  42          void halRfSendPacket(INT8U *txBuffer, INT8U size); 
  43          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length);  
  44          //*****************************************************************************************
  45          // CC1100 STROBE, CONTROL AND STATUS REGSITER
  46          #define CCxxx0_IOCFG2       0x00        // GDO2 output pin configuration
  47          #define CCxxx0_IOCFG1       0x01        // GDO1 output pin configuration
  48          #define CCxxx0_IOCFG0       0x02        // GDO0 output pin configuration
  49          #define CCxxx0_FIFOTHR      0x03        // RX FIFO and TX FIFO thresholds
  50          #define CCxxx0_SYNC1        0x04        // Sync word, high INT8U
  51          #define CCxxx0_SYNC0        0x05        // Sync word, low INT8U
  52          #define CCxxx0_PKTLEN       0x06        // Packet length
  53          #define CCxxx0_PKTCTRL1     0x07        // Packet automation control
  54          #define CCxxx0_PKTCTRL0     0x08        // Packet automation control
  55          #define CCxxx0_ADDR         0x09        // Device address
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 2   

  56          #define CCxxx0_CHANNR       0x0A        // Channel number
  57          #define CCxxx0_FSCTRL1      0x0B        // Frequency synthesizer control
  58          #define CCxxx0_FSCTRL0      0x0C        // Frequency synthesizer control
  59          #define CCxxx0_FREQ2        0x0D        // Frequency control word, high INT8U
  60          #define CCxxx0_FREQ1        0x0E        // Frequency control word, middle INT8U
  61          #define CCxxx0_FREQ0        0x0F        // Frequency control word, low INT8U
  62          #define CCxxx0_MDMCFG4      0x10        // Modem configuration
  63          #define CCxxx0_MDMCFG3      0x11        // Modem configuration
  64          #define CCxxx0_MDMCFG2      0x12        // Modem configuration
  65          #define CCxxx0_MDMCFG1      0x13        // Modem configuration
  66          #define CCxxx0_MDMCFG0      0x14        // Modem configuration
  67          #define CCxxx0_DEVIATN      0x15        // Modem deviation setting
  68          #define CCxxx0_MCSM2        0x16        // Main Radio Control State Machine configuration
  69          #define CCxxx0_MCSM1        0x17        // Main Radio Control State Machine configuration
  70          #define CCxxx0_MCSM0        0x18        // Main Radio Control State Machine configuration
  71          #define CCxxx0_FOCCFG       0x19        // Frequency Offset Compensation configuration
  72          #define CCxxx0_BSCFG        0x1A        // Bit Synchronization configuration
  73          #define CCxxx0_AGCCTRL2     0x1B        // AGC control
  74          #define CCxxx0_AGCCTRL1     0x1C        // AGC control
  75          #define CCxxx0_AGCCTRL0     0x1D        // AGC control
  76          #define CCxxx0_WOREVT1      0x1E        // High INT8U Event 0 timeout
  77          #define CCxxx0_WOREVT0      0x1F        // Low INT8U Event 0 timeout
  78          #define CCxxx0_WORCTRL      0x20        // Wake On Radio control
  79          #define CCxxx0_FREND1       0x21        // Front end RX configuration
  80          #define CCxxx0_FREND0       0x22        // Front end TX configuration
  81          #define CCxxx0_FSCAL3       0x23        // Frequency synthesizer calibration
  82          #define CCxxx0_FSCAL2       0x24        // Frequency synthesizer calibration
  83          #define CCxxx0_FSCAL1       0x25        // Frequency synthesizer calibration
  84          #define CCxxx0_FSCAL0       0x26        // Frequency synthesizer calibration
  85          #define CCxxx0_RCCTRL1      0x27        // RC oscillator configuration
  86          #define CCxxx0_RCCTRL0      0x28        // RC oscillator configuration
  87          #define CCxxx0_FSTEST       0x29        // Frequency synthesizer calibration control
  88          #define CCxxx0_PTEST        0x2A        // Production test
  89          #define CCxxx0_AGCTEST      0x2B        // AGC test
  90          #define CCxxx0_TEST2        0x2C        // Various test settings
  91          #define CCxxx0_TEST1        0x2D        // Various test settings
  92          #define CCxxx0_TEST0        0x2E        // Various test settings
  93          
  94          // Strobe commands
  95          #define CCxxx0_SRES         0x30        // Reset chip.
  96          #define CCxxx0_SFSTXON      0x31        // Enable and calibrate frequency synthesizer (if MCSM0.FS_AUTOCAL
             -=1).
  97                                                  // If in RX/TX: Go to a wait state where only the synthesizer is
  98                                                  // running (for quick RX / TX turnaround).
  99          #define CCxxx0_SXOFF        0x32        // Turn off crystal oscillator.
 100          #define CCxxx0_SCAL         0x33        // Calibrate frequency synthesizer and turn it off
 101                                                  // (enables quick start).
 102          #define CCxxx0_SRX          0x34        // Enable RX. Perform calibration first if coming from IDLE and
 103                                                  // MCSM0.FS_AUTOCAL=1.
 104          #define CCxxx0_STX          0x35        // In IDLE state: Enable TX. Perform calibration first if
 105                                                  // MCSM0.FS_AUTOCAL=1. If in RX state and CCA is enabled:
 106                                                  // Only go to TX if channel is clear.
 107          #define CCxxx0_SIDLE        0x36        // Exit RX / TX, turn off frequency synthesizer and exit
 108                                                  // Wake-On-Radio mode if applicable.
 109          #define CCxxx0_SAFC         0x37        // Perform AFC adjustment of the frequency synthesizer
 110          #define CCxxx0_SWOR         0x38        // Start automatic RX polling sequence (Wake-on-Radio)
 111          #define CCxxx0_SPWD         0x39        // Enter power down mode when CSn goes high.
 112          #define CCxxx0_SFRX         0x3A        // Flush the RX FIFO buffer.
 113          #define CCxxx0_SFTX         0x3B        // Flush the TX FIFO buffer.
 114          #define CCxxx0_SWORRST      0x3C        // Reset real time clock.
 115          #define CCxxx0_SNOP         0x3D        // No operation. May be used to pad strobe commands to two
 116                                                  // INT8Us for simpler software.
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 3   

 117          
 118          #define CCxxx0_PARTNUM      0x30
 119          #define CCxxx0_VERSION      0x31
 120          #define CCxxx0_FREQEST      0x32
 121          #define CCxxx0_LQI          0x33
 122          #define CCxxx0_RSSI         0x34
 123          #define CCxxx0_MARCSTATE    0x35
 124          #define CCxxx0_WORTIME1     0x36
 125          #define CCxxx0_WORTIME0     0x37
 126          #define CCxxx0_PKTSTATUS    0x38
 127          #define CCxxx0_VCO_VC_DAC   0x39
 128          #define CCxxx0_TXBYTES      0x3A
 129          #define CCxxx0_RXBYTES      0x3B
 130          
 131          #define CCxxx0_PATABLE      0x3E
 132          #define CCxxx0_TXFIFO       0x3F
 133          #define CCxxx0_RXFIFO       0x3F
 134          
 135          // RF_SETTINGS is a data structure which contains all relevant CCxxx0 registers
 136          typedef struct S_RF_SETTINGS
 137          {
 138                  INT8U FSCTRL2;          //自已加的
 139              INT8U FSCTRL1;   // Frequency synthesizer control.
 140              INT8U FSCTRL0;   // Frequency synthesizer control.
 141              INT8U FREQ2;     // Frequency control word, high INT8U.
 142              INT8U FREQ1;     // Frequency control word, middle INT8U.
 143              INT8U FREQ0;     // Frequency control word, low INT8U.
 144              INT8U MDMCFG4;   // Modem configuration.
 145              INT8U MDMCFG3;   // Modem configuration.
 146              INT8U MDMCFG2;   // Modem configuration.
 147              INT8U MDMCFG1;   // Modem configuration.
 148              INT8U MDMCFG0;   // Modem configuration.
 149              INT8U CHANNR;    // Channel number.
 150              INT8U DEVIATN;   // Modem deviation setting (when FSK modulation is enabled).
 151              INT8U FREND1;    // Front end RX configuration.
 152              INT8U FREND0;    // Front end RX configuration.
 153              INT8U MCSM0;     // Main Radio Control State Machine configuration.
 154              INT8U FOCCFG;    // Frequency Offset Compensation Configuration.
 155              INT8U BSCFG;     // Bit synchronization Configuration.
 156              INT8U AGCCTRL2;  // AGC control.
 157                  INT8U AGCCTRL1;  // AGC control.
 158              INT8U AGCCTRL0;  // AGC control.
 159              INT8U FSCAL3;    // Frequency synthesizer calibration.
 160              INT8U FSCAL2;    // Frequency synthesizer calibration.
 161                  INT8U FSCAL1;    // Frequency synthesizer calibration.
 162              INT8U FSCAL0;    // Frequency synthesizer calibration.
 163              INT8U FSTEST;    // Frequency synthesizer calibration control
 164              INT8U TEST2;     // Various test settings.
 165              INT8U TEST1;     // Various test settings.
 166              INT8U TEST0;     // Various test settings.
 167              INT8U IOCFG2;    // GDO2 output pin configuration
 168              INT8U IOCFG0;    // GDO0 output pin configuration
 169              INT8U PKTCTRL1;  // Packet automation control.
 170              INT8U PKTCTRL0;  // Packet automation control.
 171              INT8U ADDR;      // Device address.
 172              INT8U PKTLEN;    // Packet length.
 173          } RF_SETTINGS;
 174          
 175          /////////////////////////////////////////////////////////////////
 176          const RF_SETTINGS rfSettings = 
 177          {
 178                  0x00,
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 4   

 179              0x08,   // FSCTRL1   Frequency synthesizer control.
 180              0x00,   // FSCTRL0   Frequency synthesizer control.
 181              0x10,   // FREQ2     Frequency control word, high byte.
 182              0xA7,   // FREQ1     Frequency control word, middle byte.
 183              0x62,   // FREQ0     Frequency control word, low byte.
 184              0x5B,   // MDMCFG4   Modem configuration.
 185              0xF8,   // MDMCFG3   Modem configuration.
 186              0x03,   // MDMCFG2   Modem configuration.
 187              0x22,   // MDMCFG1   Modem configuration.
 188              0xF8,   // MDMCFG0   Modem configuration.
 189          
 190              0x00,   // CHANNR    Channel number.
 191              0x47,   // DEVIATN   Modem deviation setting (when FSK modulation is enabled).
 192              0xB6,   // FREND1    Front end RX configuration.
 193              0x10,   // FREND0    Front end RX configuration.
 194              0x18,   // MCSM0     Main Radio Control State Machine configuration.
 195              0x1D,   // FOCCFG    Frequency Offset Compensation Configuration.
 196              0x1C,   // BSCFG     Bit synchronization Configuration.
 197              0xC7,   // AGCCTRL2  AGC control.
 198              0x00,   // AGCCTRL1  AGC control.
 199              0xB2,   // AGCCTRL0  AGC control.
 200          
 201              0xEA,   // FSCAL3    Frequency synthesizer calibration.
 202              0x2A,   // FSCAL2    Frequency synthesizer calibration.
 203              0x00,   // FSCAL1    Frequency synthesizer calibration.
 204              0x11,   // FSCAL0    Frequency synthesizer calibration.
 205              0x59,   // FSTEST    Frequency synthesizer calibration.
 206              0x81,   // TEST2     Various test settings.
 207              0x35,   // TEST1     Various test settings.
 208              0x09,   // TEST0     Various test settings.
 209              0x0B,   // IOCFG2    GDO2 output pin configuration.
 210              0x06,   // IOCFG0D   GDO0 output pin configuration. Refer to SmartRF?Studio User Manual for detailed p
             -seudo register explanation.
 211          
 212              0x04,   // PKTCTRL1  Packet automation control.
 213              0x05,   // PKTCTRL0  Packet automation control.
 214              0x00,   // ADDR      Device address.
 215              0x0c    // PKTLEN    Packet length.
 216          };
 217          //*****************************************************************************************
 218          //函数名：delay(unsigned int s)
 219          //输入：时间
 220          //输出：无
 221          //功能描述：普通廷时,内部用
 222          //*****************************************************************************************             
 223          static void delay(unsigned int s)
 224          {
 225   1              unsigned int i;
 226   1              for(i=0; i<s; i++);
 227   1              for(i=0; i<s; i++);
 228   1      }
 229          
 230          
 231          void halWait(INT16U timeout) {
 232   1          do {
 233   2              _nop_();
 234   2                      _nop_();
 235   2                      _nop_();
 236   2                      _nop_();
 237   2                      _nop_();
 238   2                      _nop_();
 239   2                      _nop_();
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 5   

 240   2                      _nop_();
 241   2                      _nop_();
 242   2                      _nop_();
 243   2                      _nop_();
 244   2                      _nop_();
 245   2                      _nop_();
 246   2                      _nop_();
 247   2                      _nop_(); 
 248   2          } while (--timeout);
 249   1      }
 250          
 251          
 252          void SpiInit(void)
 253          {
 254   1              CSN=0;
 255   1              SCK=0;
 256   1              CSN=1;
 257   1      }
 258          
 259          /*****************************************************************************************
 260          //函数名：CpuInit()
 261          //输入：无
 262          //输出：无
 263          //功能描述：SPI初始化程序
 264          /*****************************************************************************************/
 265          void CpuInit(void)
 266          {
 267   1              SpiInit();
 268   1              delay(5000);
 269   1      }
 270                  
 271          
 272          //*****************************************************************************************
 273          //函数名：SpisendByte(INT8U dat)
 274          //输入：发送的数据
 275          //输出：无
 276          //功能描述：SPI发送一个字节
 277          //*****************************************************************************************
 278          INT8U SpiTxRxByte(INT8U dat)
 279          {
 280   1              INT8U i,temp;
 281   1              temp = 0;
 282   1              
 283   1              SCK = 0;
 284   1              for(i=0; i<8; i++)
 285   1              {
 286   2                      if(dat & 0x80)
 287   2                      {
 288   3                              MOSI = 1;
 289   3                      }
 290   2                      else MOSI = 0;
 291   2                      dat <<= 1;
 292   2      
 293   2                      SCK = 1; 
 294   2                      _nop_();
 295   2                      _nop_();
 296   2      
 297   2                      temp <<= 1;
 298   2                      if(MISO)temp++; 
 299   2                      SCK = 0;
 300   2                      _nop_();
 301   2                      _nop_();        
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 6   

 302   2              }
 303   1              return temp;
 304   1      }
 305          
 306          //*****************************************************************************************
 307          //函数名：void RESET_CC1100(void)
 308          //输入：无
 309          //输出：无
 310          //功能描述：复位CC1100
 311          //*****************************************************************************************
 312          void RESET_CC1100(void) 
 313          {
 314   1              CSN = 0; 
 315   1              while (MISO);
 316   1          SpiTxRxByte(CCxxx0_SRES);           //写入复位命令
 317   1              while (MISO); 
 318   1          CSN = 1; 
 319   1      }
 320          
 321          //*****************************************************************************************
 322          //函数名：void POWER_UP_RESET_CC1100(void) 
 323          //输入：无
 324          //输出：无
 325          //功能描述：上电复位CC1100
 326          //*****************************************************************************************
 327          void POWER_UP_RESET_CC1100(void) 
 328          {
 329   1              CSN = 1; 
 330   1              halWait(1); 
 331   1              CSN = 0; 
 332   1              halWait(1); 
 333   1              CSN = 1; 
 334   1              halWait(41); 
 335   1              RESET_CC1100();                 //复位CC1100
 336   1      }
 337          
 338          //*****************************************************************************************
 339          //函数名：void halSpiWriteReg(INT8U addr, INT8U value)
 340          //输入：地址和配置字
 341          //输出：无
 342          //功能描述：SPI写寄存器
 343          //*****************************************************************************************
 344          void halSpiWriteReg(INT8U addr, INT8U value) 
 345          {
 346   1          CSN = 0;
 347   1          while (MISO);
 348   1          SpiTxRxByte(addr);          //写地址
 349   1          SpiTxRxByte(value);         //写入配置
 350   1          CSN = 1;
 351   1      }
 352          
 353          //*****************************************************************************************
 354          //函数名：void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 355          //输入：地址，写入缓冲区，写入个数
 356          //输出：无
 357          //功能描述：SPI连续写配置寄存器
 358          //*****************************************************************************************
 359          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 360          {
 361   1          INT8U i, temp;
 362   1              temp = addr | WRITE_BURST;
 363   1          CSN = 0;
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 7   

 364   1          while (MISO);
 365   1          SpiTxRxByte(temp);
 366   1          for (i = 0; i < count; i++)
 367   1              {
 368   2              SpiTxRxByte(buffer[i]);
 369   2          }
 370   1          CSN = 1;
 371   1      }
 372          
 373          //*****************************************************************************************
 374          //函数名：void halSpiStrobe(INT8U strobe)
 375          //输入：命令
 376          //输出：无
 377          //功能描述：SPI写命令
 378          //*****************************************************************************************
 379          void halSpiStrobe(INT8U strobe) 
 380          {
 381   1          CSN = 0;
 382   1          while (MISO);
 383   1          SpiTxRxByte(strobe);                //写入命令
 384   1          CSN = 1;
 385   1      }
 386          
 387          
 388          
 389          
 390          
 391          //*****************************************************************************************
 392          //函数名：INT8U halSpiReadReg(INT8U addr)
 393          //输入：地址
 394          //输出：该寄存器的配置字
 395          //功能描述：SPI读寄存器
 396          //*****************************************************************************************
 397          INT8U halSpiReadReg(INT8U addr) 
 398          {
 399   1              INT8U temp, value;
 400   1          temp = addr|READ_SINGLE;//读寄存器命令
 401   1              CSN = 0;
 402   1              while (MISO);
 403   1              SpiTxRxByte(temp);
 404   1              value = SpiTxRxByte(0);
 405   1              CSN = 1;
 406   1              return value;
 407   1      }
 408          
 409          
 410          //*****************************************************************************************
 411          //函数名：void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 412          //输入：地址，读出数据后暂存的缓冲区，读出配置个数
 413          //输出：无
 414          //功能描述：SPI连续写配置寄存器
 415          //*****************************************************************************************
 416          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 417          {
 418   1          INT8U i,temp;
 419   1              temp = addr | READ_BURST;               //写入要读的配置寄存器地址和读命令
 420   1          CSN = 0;
 421   1          while (MISO);
 422   1              SpiTxRxByte(temp);   
 423   1          for (i = 0; i < count; i++) 
 424   1              {
 425   2              buffer[i] = SpiTxRxByte(0);
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 8   

 426   2          }
 427   1          CSN = 1;
 428   1      }
 429          
 430          
 431          //*****************************************************************************************
 432          //函数名：INT8U halSpiReadReg(INT8U addr)
 433          //输入：地址
 434          //输出：该状态寄存器当前值
 435          //功能描述：SPI读状态寄存器
 436          //*****************************************************************************************
 437          INT8U halSpiReadStatus(INT8U addr) 
 438          {
 439   1          INT8U value,temp;
 440   1              temp = addr | READ_BURST;               //写入要读的状态寄存器的地址同时写入读命令
 441   1          CSN = 0;
 442   1          while (MISO);
 443   1          SpiTxRxByte(temp);
 444   1              value = SpiTxRxByte(0);
 445   1              CSN = 1;
 446   1              return value;
 447   1      }
 448          //*****************************************************************************************
 449          //函数名：void halRfWriteRfSettings(RF_SETTINGS *pRfSettings)
 450          //输入：无
 451          //输出：无
 452          //功能描述：配置CC1100的寄存器
 453          //*****************************************************************************************
 454          void halRfWriteRfSettings(void) 
 455          {
 456   1      
 457   1              halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL2);//自已加的
 458   1          // Write register settings
 459   1          halSpiWriteReg(CCxxx0_FSCTRL1,  rfSettings.FSCTRL1);
 460   1          halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL0);
 461   1          halSpiWriteReg(CCxxx0_FREQ2,    rfSettings.FREQ2);
 462   1          halSpiWriteReg(CCxxx0_FREQ1,    rfSettings.FREQ1);
 463   1          halSpiWriteReg(CCxxx0_FREQ0,    rfSettings.FREQ0);
 464   1          halSpiWriteReg(CCxxx0_MDMCFG4,  rfSettings.MDMCFG4);
 465   1          halSpiWriteReg(CCxxx0_MDMCFG3,  rfSettings.MDMCFG3);
 466   1          halSpiWriteReg(CCxxx0_MDMCFG2,  rfSettings.MDMCFG2);
 467   1          halSpiWriteReg(CCxxx0_MDMCFG1,  rfSettings.MDMCFG1);
 468   1          halSpiWriteReg(CCxxx0_MDMCFG0,  rfSettings.MDMCFG0);
 469   1          halSpiWriteReg(CCxxx0_CHANNR,   rfSettings.CHANNR);
 470   1          halSpiWriteReg(CCxxx0_DEVIATN,  rfSettings.DEVIATN);
 471   1          halSpiWriteReg(CCxxx0_FREND1,   rfSettings.FREND1);
 472   1          halSpiWriteReg(CCxxx0_FREND0,   rfSettings.FREND0);
 473   1          halSpiWriteReg(CCxxx0_MCSM0 ,   rfSettings.MCSM0 );
 474   1          halSpiWriteReg(CCxxx0_FOCCFG,   rfSettings.FOCCFG);
 475   1          halSpiWriteReg(CCxxx0_BSCFG,    rfSettings.BSCFG);
 476   1          halSpiWriteReg(CCxxx0_AGCCTRL2, rfSettings.AGCCTRL2);
 477   1              halSpiWriteReg(CCxxx0_AGCCTRL1, rfSettings.AGCCTRL1);
 478   1          halSpiWriteReg(CCxxx0_AGCCTRL0, rfSettings.AGCCTRL0);
 479   1          halSpiWriteReg(CCxxx0_FSCAL3,   rfSettings.FSCAL3);
 480   1              halSpiWriteReg(CCxxx0_FSCAL2,   rfSettings.FSCAL2);
 481   1              halSpiWriteReg(CCxxx0_FSCAL1,   rfSettings.FSCAL1);
 482   1          halSpiWriteReg(CCxxx0_FSCAL0,   rfSettings.FSCAL0);
 483   1          halSpiWriteReg(CCxxx0_FSTEST,   rfSettings.FSTEST);
 484   1          halSpiWriteReg(CCxxx0_TEST2,    rfSettings.TEST2);
 485   1          halSpiWriteReg(CCxxx0_TEST1,    rfSettings.TEST1);
 486   1          halSpiWriteReg(CCxxx0_TEST0,    rfSettings.TEST0);
 487   1          halSpiWriteReg(CCxxx0_IOCFG2,   rfSettings.IOCFG2);
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 9   

 488   1          halSpiWriteReg(CCxxx0_IOCFG0,   rfSettings.IOCFG0);    
 489   1          halSpiWriteReg(CCxxx0_PKTCTRL1, rfSettings.PKTCTRL1);
 490   1          halSpiWriteReg(CCxxx0_PKTCTRL0, rfSettings.PKTCTRL0);
 491   1          halSpiWriteReg(CCxxx0_ADDR,     rfSettings.ADDR);
 492   1          halSpiWriteReg(CCxxx0_PKTLEN,   rfSettings.PKTLEN);
 493   1      }
 494          
 495          //*****************************************************************************************
 496          //函数名：void halRfSendPacket(INT8U *txBuffer, INT8U size)
 497          //输入：发送的缓冲区，发送数据个数
 498          //输出：无
 499          //功能描述：CC1100发送一组数据
 500          //*****************************************************************************************
 501          
 502          void halRfSendPacket(INT8U *txBuffer, INT8U size) 
 503          {
 504   1              halSpiWriteReg(CCxxx0_TXFIFO, size);
 505   1          halSpiWriteBurstReg(CCxxx0_TXFIFO, txBuffer, size); //写入要发送的数据
 506   1      
 507   1          halSpiStrobe(CCxxx0_STX);           //进入发送模式发送数据
 508   1      
 509   1          // Wait for GDO0 to be set -> sync transmitted
 510   1          while (!GDO0);
 511   1          // Wait for GDO0 to be cleared -> end of packet
 512   1          while (GDO0);
 513   1              halSpiStrobe(CCxxx0_SFTX);
 514   1      }
 515          
 516          
 517          void setRxMode(void)
 518          {
 519   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 520   1      }
 521          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length) 
 522          {
 523   1          INT8U status[2];
 524   1          INT8U packetLength;
 525   1              INT8U i=(*length)*4;  // 具体多少要根据datarate和length来决定
 526   1      
 527   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 528   1              delay(2);
 529   1              while (GDO0)
 530   1              {
 531   2                      delay(2);
 532   2                      --i;
 533   2                      if(i<1)
 534   2                         return 0;        
 535   2              }        
 536   1          if ((halSpiReadStatus(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)) //如果接的字节数不为0
 537   1              {
 538   2              packetLength = halSpiReadReg(CCxxx0_RXFIFO);//读出第一个字节，此字节为该帧数据长度
 539   2              if (packetLength <= *length)            //如果所要的有效数据长度小于等于接收到的数据包的长度
 540   2                      {
 541   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, rxBuffer, packetLength); //读出所有接收到的数据
 542   3                  *length = packetLength;                             //把接收数据长度的修改为当前数据的长度
 543   3              
 544   3                  // Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
 545   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, status, 2);       //读出CRC校验位
 546   3                              halSpiStrobe(CCxxx0_SFRX);              //清洗接收缓冲区
 547   3                  return (status[1] & CRC_OK);                        //如果校验成功返回接收成功
 548   3              }
 549   2                       else 
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:10:32 PAGE 10  

 550   2                      {
 551   3                  *length = packetLength;
 552   3                  halSpiStrobe(CCxxx0_SFRX);          //清洗接收缓冲区
 553   3                  return 0;
 554   3              }
 555   2          } 
 556   1              else
 557   1              return 0;
 558   1      }
 559          /*
 560          void Delay(unsigned int s)
 561          {
 562                  unsigned int i;
 563                  for(i=0; i<s; i++);
 564                  for(i=0; i<s; i++);
 565          }
 566          
 567          */
 568          void main(void)
 569          {
 570   1              INT8U leng =0;
 571   1              INT8U tf =0;
 572   1              INT8U TxBuf[8]={0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};        // 8字节, 如果需要更长的数据包,请正确设置
 573   1              INT8U RxBuf[8]={0};     
 574   1              CpuInit();
 575   1              POWER_UP_RESET_CC1100();
 576   1              halRfWriteRfSettings();
 577   1              halSpiWriteBurstReg(CCxxx0_PATABLE, PaTabel, 8);
 578   1      //      halRfSendPacket(TxBuf,8);       // Transmit Tx buffer data
 579   1              delay(6000);
 580   1              while(1)
 581   1              {
 582   2              leng=8;
 583   2              halRfSendPacket(TxBuf,leng);    // Transmit Tx buffer data
 584   2              }
 585   1              
 586   1      }
 587          
 588          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    861    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
