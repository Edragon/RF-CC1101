C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE 1100
OBJECT MODULE PLACED IN 1100.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 1100.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #define         INT8U           unsigned char
   4          #define         INT16U          unsigned int
   5          
   6          #define         WRITE_BURST             0x40                                            //连续写入
   7          #define         READ_SINGLE             0x80                                            //读
   8          #define         READ_BURST              0xC0                                            //连续读
   9          #define         BYTES_IN_RXFIFO     0x7F                                                //接收缓冲区的有效字节数
  10          #define         CRC_OK              0x80                                                //CRC校验通过位标志
  11          //*****************************************************************************************
  12          sbit    GDO0    =P1^3;
  13          sbit    GDO2    =P3^2;
  14          sbit    MISO    =P1^6;
  15          sbit    MOSI    =P1^5;
  16          sbit    SCK             =P1^7;
  17          sbit    CSN             =P1^2;
  18          //*****************************************************************************************
  19          sbit    LED2    =P3^4;
  20          sbit    LED1    =P3^5;
  21          sbit    KEY1    =P3^6;
  22          sbit    KEY2    =P3^7;
  23          //*****************************************************************************************
  24          sbit    led3=P2^3;
  25          sbit    led2=P2^2;
  26          sbit    led1=P2^1;
  27          sbit    led0=P2^0;
  28          //*****************************************************************************************
  29          INT8U PaTabel[8] = {0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60};
  30          //*****************************************************************************************
  31          void SpiInit(void);
  32          void CpuInit(void);
  33          void RESET_CC1100(void);
  34          void POWER_UP_RESET_CC1100(void);
  35          void halSpiWriteReg(INT8U addr, INT8U value);
  36          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  37          void halSpiStrobe(INT8U strobe);
  38          INT8U halSpiReadReg(INT8U addr);
  39          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count);
  40          INT8U halSpiReadStatus(INT8U addr);
  41          void halRfWriteRfSettings(void);
  42          void halRfSendPacket(INT8U *txBuffer, INT8U size); 
  43          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length);  
  44          void StartUART( void );
  45          void R_S_Byte(INT8U R_Byte);
  46          //*****************************************************************************************
  47          // CC1100 STROBE, CONTROL AND STATUS REGSITER
  48          #define CCxxx0_IOCFG2       0x00        // GDO2 output pin configuration
  49          #define CCxxx0_IOCFG1       0x01        // GDO1 output pin configuration
  50          #define CCxxx0_IOCFG0       0x02        // GDO0 output pin configuration
  51          #define CCxxx0_FIFOTHR      0x03        // RX FIFO and TX FIFO thresholds
  52          #define CCxxx0_SYNC1        0x04        // Sync word, high INT8U
  53          #define CCxxx0_SYNC0        0x05        // Sync word, low INT8U
  54          #define CCxxx0_PKTLEN       0x06        // Packet length
  55          #define CCxxx0_PKTCTRL1     0x07        // Packet automation control
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 2   

  56          #define CCxxx0_PKTCTRL0     0x08        // Packet automation control
  57          #define CCxxx0_ADDR         0x09        // Device address
  58          #define CCxxx0_CHANNR       0x0A        // Channel number
  59          #define CCxxx0_FSCTRL1      0x0B        // Frequency synthesizer control
  60          #define CCxxx0_FSCTRL0      0x0C        // Frequency synthesizer control
  61          #define CCxxx0_FREQ2        0x0D        // Frequency control word, high INT8U
  62          #define CCxxx0_FREQ1        0x0E        // Frequency control word, middle INT8U
  63          #define CCxxx0_FREQ0        0x0F        // Frequency control word, low INT8U
  64          #define CCxxx0_MDMCFG4      0x10        // Modem configuration
  65          #define CCxxx0_MDMCFG3      0x11        // Modem configuration
  66          #define CCxxx0_MDMCFG2      0x12        // Modem configuration
  67          #define CCxxx0_MDMCFG1      0x13        // Modem configuration
  68          #define CCxxx0_MDMCFG0      0x14        // Modem configuration
  69          #define CCxxx0_DEVIATN      0x15        // Modem deviation setting
  70          #define CCxxx0_MCSM2        0x16        // Main Radio Control State Machine configuration
  71          #define CCxxx0_MCSM1        0x17        // Main Radio Control State Machine configuration
  72          #define CCxxx0_MCSM0        0x18        // Main Radio Control State Machine configuration
  73          #define CCxxx0_FOCCFG       0x19        // Frequency Offset Compensation configuration
  74          #define CCxxx0_BSCFG        0x1A        // Bit Synchronization configuration
  75          #define CCxxx0_AGCCTRL2     0x1B        // AGC control
  76          #define CCxxx0_AGCCTRL1     0x1C        // AGC control
  77          #define CCxxx0_AGCCTRL0     0x1D        // AGC control
  78          #define CCxxx0_WOREVT1      0x1E        // High INT8U Event 0 timeout
  79          #define CCxxx0_WOREVT0      0x1F        // Low INT8U Event 0 timeout
  80          #define CCxxx0_WORCTRL      0x20        // Wake On Radio control
  81          #define CCxxx0_FREND1       0x21        // Front end RX configuration
  82          #define CCxxx0_FREND0       0x22        // Front end TX configuration
  83          #define CCxxx0_FSCAL3       0x23        // Frequency synthesizer calibration
  84          #define CCxxx0_FSCAL2       0x24        // Frequency synthesizer calibration
  85          #define CCxxx0_FSCAL1       0x25        // Frequency synthesizer calibration
  86          #define CCxxx0_FSCAL0       0x26        // Frequency synthesizer calibration
  87          #define CCxxx0_RCCTRL1      0x27        // RC oscillator configuration
  88          #define CCxxx0_RCCTRL0      0x28        // RC oscillator configuration
  89          #define CCxxx0_FSTEST       0x29        // Frequency synthesizer calibration control
  90          #define CCxxx0_PTEST        0x2A        // Production test
  91          #define CCxxx0_AGCTEST      0x2B        // AGC test
  92          #define CCxxx0_TEST2        0x2C        // Various test settings
  93          #define CCxxx0_TEST1        0x2D        // Various test settings
  94          #define CCxxx0_TEST0        0x2E        // Various test settings
  95          
  96          // Strobe commands
  97          #define CCxxx0_SRES         0x30        // Reset chip.
  98          #define CCxxx0_SFSTXON      0x31        // Enable and calibrate frequency synthesizer (if MCSM0.FS_AUTOCAL
             -=1).
  99                                                  // If in RX/TX: Go to a wait state where only the synthesizer is
 100                                                  // running (for quick RX / TX turnaround).
 101          #define CCxxx0_SXOFF        0x32        // Turn off crystal oscillator.
 102          #define CCxxx0_SCAL         0x33        // Calibrate frequency synthesizer and turn it off
 103                                                  // (enables quick start).
 104          #define CCxxx0_SRX          0x34        // Enable RX. Perform calibration first if coming from IDLE and
 105                                                  // MCSM0.FS_AUTOCAL=1.
 106          #define CCxxx0_STX          0x35        // In IDLE state: Enable TX. Perform calibration first if
 107                                                  // MCSM0.FS_AUTOCAL=1. If in RX state and CCA is enabled:
 108                                                  // Only go to TX if channel is clear.
 109          #define CCxxx0_SIDLE        0x36        // Exit RX / TX, turn off frequency synthesizer and exit
 110                                                  // Wake-On-Radio mode if applicable.
 111          #define CCxxx0_SAFC         0x37        // Perform AFC adjustment of the frequency synthesizer
 112          #define CCxxx0_SWOR         0x38        // Start automatic RX polling sequence (Wake-on-Radio)
 113          #define CCxxx0_SPWD         0x39        // Enter power down mode when CSn goes high.
 114          #define CCxxx0_SFRX         0x3A        // Flush the RX FIFO buffer.
 115          #define CCxxx0_SFTX         0x3B        // Flush the TX FIFO buffer.
 116          #define CCxxx0_SWORRST      0x3C        // Reset real time clock.
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 3   

 117          #define CCxxx0_SNOP         0x3D        // No operation. May be used to pad strobe commands to two
 118                                                  // INT8Us for simpler software.
 119          
 120          #define CCxxx0_PARTNUM      0x30
 121          #define CCxxx0_VERSION      0x31
 122          #define CCxxx0_FREQEST      0x32
 123          #define CCxxx0_LQI          0x33
 124          #define CCxxx0_RSSI         0x34
 125          #define CCxxx0_MARCSTATE    0x35
 126          #define CCxxx0_WORTIME1     0x36
 127          #define CCxxx0_WORTIME0     0x37
 128          #define CCxxx0_PKTSTATUS    0x38
 129          #define CCxxx0_VCO_VC_DAC   0x39
 130          #define CCxxx0_TXBYTES      0x3A
 131          #define CCxxx0_RXBYTES      0x3B
 132          
 133          #define CCxxx0_PATABLE      0x3E
 134          #define CCxxx0_TXFIFO       0x3F
 135          #define CCxxx0_RXFIFO       0x3F
 136          
 137          // RF_SETTINGS is a data structure which contains all relevant CCxxx0 registers
 138          typedef struct S_RF_SETTINGS
 139          {
 140                  INT8U FSCTRL2;          //自已加的
 141              INT8U FSCTRL1;   // Frequency synthesizer control.
 142              INT8U FSCTRL0;   // Frequency synthesizer control.
 143              INT8U FREQ2;     // Frequency control word, high INT8U.
 144              INT8U FREQ1;     // Frequency control word, middle INT8U.
 145              INT8U FREQ0;     // Frequency control word, low INT8U.
 146              INT8U MDMCFG4;   // Modem configuration.
 147              INT8U MDMCFG3;   // Modem configuration.
 148              INT8U MDMCFG2;   // Modem configuration.
 149              INT8U MDMCFG1;   // Modem configuration.
 150              INT8U MDMCFG0;   // Modem configuration.
 151              INT8U CHANNR;    // Channel number.
 152              INT8U DEVIATN;   // Modem deviation setting (when FSK modulation is enabled).
 153              INT8U FREND1;    // Front end RX configuration.
 154              INT8U FREND0;    // Front end RX configuration.
 155              INT8U MCSM0;     // Main Radio Control State Machine configuration.
 156              INT8U FOCCFG;    // Frequency Offset Compensation Configuration.
 157              INT8U BSCFG;     // Bit synchronization Configuration.
 158              INT8U AGCCTRL2;  // AGC control.
 159                  INT8U AGCCTRL1;  // AGC control.
 160              INT8U AGCCTRL0;  // AGC control.
 161              INT8U FSCAL3;    // Frequency synthesizer calibration.
 162              INT8U FSCAL2;    // Frequency synthesizer calibration.
 163                  INT8U FSCAL1;    // Frequency synthesizer calibration.
 164              INT8U FSCAL0;    // Frequency synthesizer calibration.
 165              INT8U FSTEST;    // Frequency synthesizer calibration control
 166              INT8U TEST2;     // Various test settings.
 167              INT8U TEST1;     // Various test settings.
 168              INT8U TEST0;     // Various test settings.
 169              INT8U IOCFG2;    // GDO2 output pin configuration
 170              INT8U IOCFG0;    // GDO0 output pin configuration
 171              INT8U PKTCTRL1;  // Packet automation control.
 172              INT8U PKTCTRL0;  // Packet automation control.
 173              INT8U ADDR;      // Device address.
 174              INT8U PKTLEN;    // Packet length.
 175          } RF_SETTINGS;
 176          
 177          /////////////////////////////////////////////////////////////////
 178          const RF_SETTINGS rfSettings = 
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 4   

 179          {
 180                  0x00,
 181              0x08,   // FSCTRL1   Frequency synthesizer control.
 182              0x00,   // FSCTRL0   Frequency synthesizer control.
 183              0x10,   // FREQ2     Frequency control word, high byte.
 184              0xA7,   // FREQ1     Frequency control word, middle byte.
 185              0x62,   // FREQ0     Frequency control word, low byte.
 186              0x5B,   // MDMCFG4   Modem configuration.
 187              0xF8,   // MDMCFG3   Modem configuration.
 188              0x03,   // MDMCFG2   Modem configuration.
 189              0x22,   // MDMCFG1   Modem configuration.
 190              0xF8,   // MDMCFG0   Modem configuration.
 191          
 192              0x00,   // CHANNR    Channel number.
 193              0x47,   // DEVIATN   Modem deviation setting (when FSK modulation is enabled).
 194              0xB6,   // FREND1    Front end RX configuration.
 195              0x10,   // FREND0    Front end RX configuration.
 196              0x18,   // MCSM0     Main Radio Control State Machine configuration.
 197              0x1D,   // FOCCFG    Frequency Offset Compensation Configuration.
 198              0x1C,   // BSCFG     Bit synchronization Configuration.
 199              0xC7,   // AGCCTRL2  AGC control.
 200              0x00,   // AGCCTRL1  AGC control.
 201              0xB2,   // AGCCTRL0  AGC control.
 202          
 203              0xEA,   // FSCAL3    Frequency synthesizer calibration.
 204              0x2A,   // FSCAL2    Frequency synthesizer calibration.
 205              0x00,   // FSCAL1    Frequency synthesizer calibration.
 206              0x11,   // FSCAL0    Frequency synthesizer calibration.
 207              0x59,   // FSTEST    Frequency synthesizer calibration.
 208              0x81,   // TEST2     Various test settings.
 209              0x35,   // TEST1     Various test settings.
 210              0x09,   // TEST0     Various test settings.
 211              0x0B,   // IOCFG2    GDO2 output pin configuration.
 212              0x06,   // IOCFG0D   GDO0 output pin configuration. Refer to SmartRF?Studio User Manual for detailed p
             -seudo register explanation.
 213          
 214              0x04,   // PKTCTRL1  Packet automation control.
 215              0x05,   // PKTCTRL0  Packet automation control.
 216              0x00,   // ADDR      Device address.
 217              0x0c    // PKTLEN    Packet length.
 218          };
 219          //*****************************************************************************************
 220          //函数名：delay(unsigned int s)
 221          //输入：时间
 222          //输出：无
 223          //功能描述：普通廷时,内部用
 224          //*****************************************************************************************             
 225          static void delay(unsigned int s)
 226          {
 227   1              unsigned int i;
 228   1              for(i=0; i<s; i++);
 229   1              for(i=0; i<s; i++);
 230   1      }
 231          
 232          
 233          void halWait(INT16U timeout) {
 234   1          do {
 235   2              _nop_();
 236   2                      _nop_();
 237   2                      _nop_();
 238   2                      _nop_();
 239   2                      _nop_();
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 5   

 240   2                      _nop_();
 241   2                      _nop_();
 242   2                      _nop_();
 243   2                      _nop_();
 244   2                      _nop_();
 245   2                      _nop_();
 246   2                      _nop_();
 247   2                      _nop_();
 248   2                      _nop_();
 249   2                      _nop_(); 
 250   2          } while (--timeout);
 251   1      }
 252          
 253          
 254          void SpiInit(void)
 255          {
 256   1              CSN=0;
 257   1              SCK=0;
 258   1              CSN=1;
 259   1      }
 260          
 261          /*****************************************************************************************
 262          //函数名：CpuInit()
 263          //输入：无
 264          //输出：无
 265          //功能描述：SPI初始化程序
 266          /*****************************************************************************************/
 267          void CpuInit(void)
 268          {
 269   1              SpiInit();
 270   1              delay(5000);
 271   1      }
 272                  
 273          
 274          //*****************************************************************************************
 275          //函数名：SpisendByte(INT8U dat)
 276          //输入：发送的数据
 277          //输出：无
 278          //功能描述：SPI发送一个字节
 279          //*****************************************************************************************
 280          INT8U SpiTxRxByte(INT8U dat)
 281          {
 282   1              INT8U i,temp;
 283   1              temp = 0;
 284   1              
 285   1              SCK = 0;
 286   1              for(i=0; i<8; i++)
 287   1              {
 288   2                      if(dat & 0x80)
 289   2                      {
 290   3                              MOSI = 1;
 291   3                      }
 292   2                      else MOSI = 0;
 293   2                      dat <<= 1;
 294   2      
 295   2                      SCK = 1; 
 296   2                      _nop_();
 297   2                      _nop_();
 298   2      
 299   2                      temp <<= 1;
 300   2                      if(MISO)temp++; 
 301   2                      SCK = 0;
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 6   

 302   2                      _nop_();
 303   2                      _nop_();        
 304   2              }
 305   1              return temp;
 306   1      }
 307          
 308          //*****************************************************************************************
 309          //函数名：void RESET_CC1100(void)
 310          //输入：无
 311          //输出：无
 312          //功能描述：复位CC1100
 313          //*****************************************************************************************
 314          void RESET_CC1100(void) 
 315          {
 316   1              CSN = 0; 
 317   1              while (MISO);
 318   1          SpiTxRxByte(CCxxx0_SRES);           //写入复位命令
 319   1              while (MISO); 
 320   1          CSN = 1; 
 321   1      }
 322          
 323          //*****************************************************************************************
 324          //函数名：void POWER_UP_RESET_CC1100(void) 
 325          //输入：无
 326          //输出：无
 327          //功能描述：上电复位CC1100
 328          //*****************************************************************************************
 329          void POWER_UP_RESET_CC1100(void) 
 330          {
 331   1              CSN = 1; 
 332   1              halWait(1); 
 333   1              CSN = 0; 
 334   1              halWait(1); 
 335   1              CSN = 1; 
 336   1              halWait(41); 
 337   1              RESET_CC1100();                 //复位CC1100
 338   1      }
 339          
 340          //*****************************************************************************************
 341          //函数名：void halSpiWriteReg(INT8U addr, INT8U value)
 342          //输入：地址和配置字
 343          //输出：无
 344          //功能描述：SPI写寄存器
 345          //*****************************************************************************************
 346          void halSpiWriteReg(INT8U addr, INT8U value) 
 347          {
 348   1          CSN = 0;
 349   1          while (MISO);
 350   1          SpiTxRxByte(addr);          //写地址
 351   1          SpiTxRxByte(value);         //写入配置
 352   1          CSN = 1;
 353   1      }
 354          
 355          //*****************************************************************************************
 356          //函数名：void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 357          //输入：地址，写入缓冲区，写入个数
 358          //输出：无
 359          //功能描述：SPI连续写配置寄存器
 360          //*****************************************************************************************
 361          void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 362          {
 363   1          INT8U i, temp;
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 7   

 364   1              temp = addr | WRITE_BURST;
 365   1          CSN = 0;
 366   1          while (MISO);
 367   1          SpiTxRxByte(temp);
 368   1          for (i = 0; i < count; i++)
 369   1              {
 370   2              SpiTxRxByte(buffer[i]);
 371   2          }
 372   1          CSN = 1;
 373   1      }
 374          
 375          //*****************************************************************************************
 376          //函数名：void halSpiStrobe(INT8U strobe)
 377          //输入：命令
 378          //输出：无
 379          //功能描述：SPI写命令
 380          //*****************************************************************************************
 381          void halSpiStrobe(INT8U strobe) 
 382          {
 383   1          CSN = 0;
 384   1          while (MISO);
 385   1          SpiTxRxByte(strobe);                //写入命令
 386   1          CSN = 1;
 387   1      }
 388          
 389          
 390          
 391          
 392          
 393          //*****************************************************************************************
 394          //函数名：INT8U halSpiReadReg(INT8U addr)
 395          //输入：地址
 396          //输出：该寄存器的配置字
 397          //功能描述：SPI读寄存器
 398          //*****************************************************************************************
 399          INT8U halSpiReadReg(INT8U addr) 
 400          {
 401   1              INT8U temp, value;
 402   1          temp = addr|READ_SINGLE;//读寄存器命令
 403   1              CSN = 0;
 404   1              while (MISO);
 405   1              SpiTxRxByte(temp);
 406   1              value = SpiTxRxByte(0);
 407   1              CSN = 1;
 408   1              return value;
 409   1      }
 410          
 411          
 412          //*****************************************************************************************
 413          //函数名：void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
 414          //输入：地址，读出数据后暂存的缓冲区，读出配置个数
 415          //输出：无
 416          //功能描述：SPI连续写配置寄存器
 417          //*****************************************************************************************
 418          void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count) 
 419          {
 420   1          INT8U i,temp;
 421   1              temp = addr | READ_BURST;               //写入要读的配置寄存器地址和读命令
 422   1          CSN = 0;
 423   1          while (MISO);
 424   1              SpiTxRxByte(temp);   
 425   1          for (i = 0; i < count; i++) 
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 8   

 426   1              {
 427   2              buffer[i] = SpiTxRxByte(0);
 428   2          }
 429   1          CSN = 1;
 430   1      }
 431          
 432          
 433          //*****************************************************************************************
 434          //函数名：INT8U halSpiReadReg(INT8U addr)
 435          //输入：地址
 436          //输出：该状态寄存器当前值
 437          //功能描述：SPI读状态寄存器
 438          //*****************************************************************************************
 439          INT8U halSpiReadStatus(INT8U addr) 
 440          {
 441   1          INT8U value,temp;
 442   1              temp = addr | READ_BURST;               //写入要读的状态寄存器的地址同时写入读命令
 443   1          CSN = 0;
 444   1          while (MISO);
 445   1          SpiTxRxByte(temp);
 446   1              value = SpiTxRxByte(0);
 447   1              CSN = 1;
 448   1              return value;
 449   1      }
 450          //*****************************************************************************************
 451          //函数名：void halRfWriteRfSettings(RF_SETTINGS *pRfSettings)
 452          //输入：无
 453          //输出：无
 454          //功能描述：配置CC1100的寄存器
 455          //*****************************************************************************************
 456          void halRfWriteRfSettings(void) 
 457          {
 458   1      
 459   1              halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL2);//自已加的
 460   1          // Write register settings
 461   1          halSpiWriteReg(CCxxx0_FSCTRL1,  rfSettings.FSCTRL1);
 462   1          halSpiWriteReg(CCxxx0_FSCTRL0,  rfSettings.FSCTRL0);
 463   1          halSpiWriteReg(CCxxx0_FREQ2,    rfSettings.FREQ2);
 464   1          halSpiWriteReg(CCxxx0_FREQ1,    rfSettings.FREQ1);
 465   1          halSpiWriteReg(CCxxx0_FREQ0,    rfSettings.FREQ0);
 466   1          halSpiWriteReg(CCxxx0_MDMCFG4,  rfSettings.MDMCFG4);
 467   1          halSpiWriteReg(CCxxx0_MDMCFG3,  rfSettings.MDMCFG3);
 468   1          halSpiWriteReg(CCxxx0_MDMCFG2,  rfSettings.MDMCFG2);
 469   1          halSpiWriteReg(CCxxx0_MDMCFG1,  rfSettings.MDMCFG1);
 470   1          halSpiWriteReg(CCxxx0_MDMCFG0,  rfSettings.MDMCFG0);
 471   1          halSpiWriteReg(CCxxx0_CHANNR,   rfSettings.CHANNR);
 472   1          halSpiWriteReg(CCxxx0_DEVIATN,  rfSettings.DEVIATN);
 473   1          halSpiWriteReg(CCxxx0_FREND1,   rfSettings.FREND1);
 474   1          halSpiWriteReg(CCxxx0_FREND0,   rfSettings.FREND0);
 475   1          halSpiWriteReg(CCxxx0_MCSM0 ,   rfSettings.MCSM0 );
 476   1          halSpiWriteReg(CCxxx0_FOCCFG,   rfSettings.FOCCFG);
 477   1          halSpiWriteReg(CCxxx0_BSCFG,    rfSettings.BSCFG);
 478   1          halSpiWriteReg(CCxxx0_AGCCTRL2, rfSettings.AGCCTRL2);
 479   1              halSpiWriteReg(CCxxx0_AGCCTRL1, rfSettings.AGCCTRL1);
 480   1          halSpiWriteReg(CCxxx0_AGCCTRL0, rfSettings.AGCCTRL0);
 481   1          halSpiWriteReg(CCxxx0_FSCAL3,   rfSettings.FSCAL3);
 482   1              halSpiWriteReg(CCxxx0_FSCAL2,   rfSettings.FSCAL2);
 483   1              halSpiWriteReg(CCxxx0_FSCAL1,   rfSettings.FSCAL1);
 484   1          halSpiWriteReg(CCxxx0_FSCAL0,   rfSettings.FSCAL0);
 485   1          halSpiWriteReg(CCxxx0_FSTEST,   rfSettings.FSTEST);
 486   1          halSpiWriteReg(CCxxx0_TEST2,    rfSettings.TEST2);
 487   1          halSpiWriteReg(CCxxx0_TEST1,    rfSettings.TEST1);
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 9   

 488   1          halSpiWriteReg(CCxxx0_TEST0,    rfSettings.TEST0);
 489   1          halSpiWriteReg(CCxxx0_IOCFG2,   rfSettings.IOCFG2);
 490   1          halSpiWriteReg(CCxxx0_IOCFG0,   rfSettings.IOCFG0);    
 491   1          halSpiWriteReg(CCxxx0_PKTCTRL1, rfSettings.PKTCTRL1);
 492   1          halSpiWriteReg(CCxxx0_PKTCTRL0, rfSettings.PKTCTRL0);
 493   1          halSpiWriteReg(CCxxx0_ADDR,     rfSettings.ADDR);
 494   1          halSpiWriteReg(CCxxx0_PKTLEN,   rfSettings.PKTLEN);
 495   1      }
 496          
 497          //*****************************************************************************************
 498          //函数名：void halRfSendPacket(INT8U *txBuffer, INT8U size)
 499          //输入：发送的缓冲区，发送数据个数
 500          //输出：无
 501          //功能描述：CC1100发送一组数据
 502          //*****************************************************************************************
 503          
 504          void halRfSendPacket(INT8U *txBuffer, INT8U size) 
 505          {
 506   1              halSpiWriteReg(CCxxx0_TXFIFO, size);
 507   1          halSpiWriteBurstReg(CCxxx0_TXFIFO, txBuffer, size); //写入要发送的数据
 508   1      
 509   1          halSpiStrobe(CCxxx0_STX);           //进入发送模式发送数据
 510   1      
 511   1          // Wait for GDO0 to be set -> sync transmitted
 512   1          while (!GDO0);
 513   1          // Wait for GDO0 to be cleared -> end of packet
 514   1          while (GDO0);
 515   1              halSpiStrobe(CCxxx0_SFTX);
 516   1      }
 517          
 518          
 519          void setRxMode(void)
 520          {
 521   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 522   1      }
 523          //---------------------------------------------------------------------------
 524          INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length) 
 525          {
 526   1          INT8U status[2];
 527   1          INT8U packetLength;
 528   1              INT8U i=(*length)*4;  // 具体多少要根据datarate和length来决定
 529   1      
 530   1          halSpiStrobe(CCxxx0_SRX);           //进入接收状态
 531   1              //delay(5);
 532   1          //while (!GDO1);
 533   1          //while (GDO1);
 534   1              delay(2);
 535   1              while (GDO0)
 536   1              {
 537   2                      delay(2);
 538   2                      --i;
 539   2                      if(i<1)
 540   2                         return 0;        
 541   2              }        
 542   1          if ((halSpiReadStatus(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)) //如果接的字节数不为0
 543   1              {
 544   2              packetLength = halSpiReadReg(CCxxx0_RXFIFO);//读出第一个字节，此字节为该帧数据长度
 545   2              if (packetLength <= *length)            //如果所要的有效数据长度小于等于接收到的数据包的长度
 546   2                      {
 547   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, rxBuffer, packetLength); //读出所有接收到的数据
 548   3                  *length = packetLength;                             //把接收数据长度的修改为当前数据的长度
 549   3              
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 10  

 550   3                  // Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
 551   3                  halSpiReadBurstReg(CCxxx0_RXFIFO, status, 2);       //读出CRC校验位
 552   3                              halSpiStrobe(CCxxx0_SFRX);              //清洗接收缓冲区
 553   3                  return (status[1] & CRC_OK);                        //如果校验成功返回接收成功
 554   3              }
 555   2                       else 
 556   2                      {
 557   3                  *length = packetLength;
 558   3                  halSpiStrobe(CCxxx0_SFRX);          //清洗接收缓冲区
 559   3                  return 0;
 560   3              }
 561   2          } 
 562   1              else
 563   1              return 0;
 564   1      }
 565          
 566          void StartUART( void )
 567          {                                                       //波特率4800
 568   1           SCON = 0x50;
 569   1           TMOD = 0x20;
 570   1           TH1 = 0xFA;
 571   1           TL1 = 0xFA;
 572   1           PCON = 0x00;
 573   1           TR1 = 1;
 574   1      }
 575          void R_S_Byte(INT8U R_Byte)
 576          {       
 577   1               SBUF = R_Byte;  
 578   1           while( TI == 0 );                          //查询法
 579   1               TI = 0;
 580   1           
 581   1      }
 582          void main(void)
 583          {
 584   1              INT8U i,leng =0;
 585   1              INT8U RxBuf[8]={0};     // 8字节, 如果需要更长的数据包,请正确设置
 586   1              CpuInit();
 587   1              POWER_UP_RESET_CC1100();
 588   1              halRfWriteRfSettings();
 589   1              halSpiWriteBurstReg(CCxxx0_PATABLE, PaTabel, 8);//发射功率设置
 590   1              delay(6000);
 591   1              StartUART();
 592   1              while(1)
 593   1              {
 594   2                      leng =8; // 预计接受8 bytes
 595   2                      if(halRfReceivePacket(RxBuf,&leng))  //判断是否接收到数据
 596   2                      {
 597   3                      for(i=0;i<8;i++)
 598   3                      {
 599   4                      R_S_Byte(RxBuf[i])      ;       
 600   4                              delay(3000);
 601   4                      }
 602   3                      }
 603   2              }
 604   1              
 605   1      }
 606          
 607          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    908    ----
C51 COMPILER V7.06   1100                                                                  12/19/2007 21:09:47 PAGE 11  

   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
